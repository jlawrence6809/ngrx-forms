import { isBoxed } from './boxing';
import { deepEquals, isEmpty } from './util';
/**
 * This function determines if a value is a form state.
 */
export function isFormState(state) {
    return !!state && state.hasOwnProperty('id') && state.hasOwnProperty('value') && state.hasOwnProperty('errors');
}
/**
 * This function determines if a value is an array state.
 */
export function isArrayState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && Array.isArray(state.controls);
}
/**
 * This function determines if a value is a group state.
 */
export function isGroupState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && !Array.isArray(state.controls) && typeof state.controls !== 'function';
}
export function createChildState(id, childValue) {
    if (isBoxed(childValue)) {
        return createFormControlState(id, childValue);
    }
    if (childValue !== null && Array.isArray(childValue)) {
        return createFormArrayState(id, childValue);
    }
    if (childValue !== null && typeof childValue === 'object') {
        return createFormGroupState(id, childValue);
    }
    return createFormControlState(id, childValue);
}
export function verifyFormControlValueIsValid(value) {
    if (value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value) >= 0) {
        return value;
    }
    if (!isBoxed(value)) {
        const errorMsg = 'Form control states only support undefined, null, string, number, and boolean values as well as boxed values';
        throw new Error(`${errorMsg}; got ${JSON.stringify(value)} of type ${typeof value}`); // `;
    }
    if (value.value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value.value) >= 0) {
        return value;
    }
    const serialized = JSON.stringify(value);
    const deserialized = JSON.parse(serialized);
    if (deepEquals(value, deserialized)) {
        return value;
    }
    throw new Error(`A form control value must be serializable (i.e. value === JSON.parse(JSON.stringify(value))), got: ${JSON.stringify(value)}`);
}
/**
 * This function creates a form control state with an ID and a value.
 */
export function createFormControlState(id, value) {
    return {
        id,
        value: verifyFormControlValueIsValid(value),
        errors: {},
        pendingValidations: [],
        isValidationPending: false,
        isValid: true,
        isInvalid: false,
        isEnabled: true,
        isDisabled: false,
        isDirty: false,
        isPristine: true,
        isTouched: false,
        isUntouched: true,
        isSubmitted: false,
        isUnsubmitted: true,
        isFocused: false,
        isUnfocused: true,
        userDefinedProperties: {},
    };
}
export function getFormGroupValue(controls, originalValue) {
    let hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    const newValue = Object.keys(controls).reduce((res, key) => {
        hasChanged = hasChanged || originalValue[key] !== controls[key].value;
        res[key] = controls[key].value;
        return res;
    }, {});
    return hasChanged ? newValue : originalValue;
}
export function getFormGroupErrors(controls, originalErrors) {
    let hasChanged = false;
    const groupErrors = Object.keys(originalErrors)
        .filter(key => !key.startsWith('_'))
        .reduce((res, key) => Object.assign(res, { [key]: originalErrors[key] }), {});
    const newErrors = Object.keys(controls).reduce((res, key) => {
        const controlErrors = controls[key].errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors[`_${key}`] !== controlErrors;
            Object.assign(res, { [`_${key}`]: controls[key].errors });
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty(`_${key}`);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeGroupState(id, controls, value, errors, pendingValidations, userDefinedProperties, flags) {
    value = getFormGroupValue(controls, value);
    errors = getFormGroupErrors(controls, errors);
    const isValid = isEmpty(errors);
    const isDirty = flags.wasOrShouldBeDirty || Object.keys(controls).some(key => controls[key].isDirty);
    const isEnabled = flags.wasOrShouldBeEnabled || Object.keys(controls).some(key => controls[key].isEnabled);
    const isTouched = flags.wasOrShouldBeTouched || Object.keys(controls).some(key => controls[key].isTouched);
    const isSubmitted = flags.wasOrShouldBeSubmitted || Object.keys(controls).some(key => controls[key].isSubmitted);
    const isValidationPending = pendingValidations.length > 0 || Object.keys(controls).some(key => controls[key].isValidationPending);
    return {
        id,
        value,
        errors,
        pendingValidations,
        isValidationPending,
        isValid,
        isInvalid: !isValid,
        isEnabled,
        isDisabled: !isEnabled,
        isDirty,
        isPristine: !isDirty,
        isTouched,
        isUntouched: !isTouched,
        isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties,
        controls,
    };
}
/**
 * This function creates a form group state with an ID and a value.
 * From the value the shape of the group state is inferred, i.e.
 * object properties are inferred as form groups, array properties
 * are inferred as form arrays, and primitive properties are inferred
 * as form controls.
 */
export function createFormGroupState(id, initialValue) {
    const controls = Object.keys(initialValue)
        .map((key) => [key, createChildState(`${id}.${key}`, initialValue[key])])
        .reduce((res, [controlId, state]) => Object.assign(res, { [controlId]: state }), {});
    return computeGroupState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
function getFormArrayValue(controls, originalValue) {
    let hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    const newValue = controls.map((state, i) => {
        hasChanged = hasChanged || originalValue[i] !== state.value;
        return state.value;
    });
    return hasChanged ? newValue : originalValue;
}
function getFormArrayErrors(controls, originalErrors) {
    let hasChanged = false;
    const groupErrors = Object.keys(originalErrors)
        .filter(key => !key.startsWith('_'))
        .reduce((res, key) => Object.assign(res, { [key]: originalErrors[key] }), {});
    const newErrors = controls.reduce((res, state, i) => {
        const controlErrors = state.errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors[`_${i}`] !== controlErrors;
            Object.assign(res, { [`_${i}`]: controlErrors });
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty(`_${i}`);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeArrayState(id, inferredControls, value, errors, pendingValidations, userDefinedProperties, flags) {
    const controls = inferredControls;
    value = getFormArrayValue(controls, value);
    errors = getFormArrayErrors(controls, errors);
    const isValid = isEmpty(errors);
    const isDirty = flags.wasOrShouldBeDirty || controls.some(state => state.isDirty);
    const isEnabled = flags.wasOrShouldBeEnabled || controls.some(state => state.isEnabled);
    const isTouched = flags.wasOrShouldBeTouched || controls.some(state => state.isTouched);
    const isSubmitted = flags.wasOrShouldBeSubmitted || controls.some(state => state.isSubmitted);
    const isValidationPending = pendingValidations.length > 0 || controls.some(state => state.isValidationPending);
    return {
        id,
        value,
        errors,
        pendingValidations,
        isValidationPending,
        isValid,
        isInvalid: !isValid,
        isEnabled,
        isDisabled: !isEnabled,
        isDirty,
        isPristine: !isDirty,
        isTouched,
        isUntouched: !isTouched,
        isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties,
        controls: inferredControls,
    };
}
/**
 * This function creates a form array state with an ID and a value.
 * From the value the shape of the array state is inferred, i.e.
 * object values are inferred as form groups, array values
 * are inferred as form arrays, and primitive values are inferred
 * as form controls.
 */
export function createFormArrayState(id, initialValue) {
    const controls = initialValue
        .map((value, i) => createChildState(`${id}.${i}`, value));
    return computeArrayState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWZvcm1zLyIsInNvdXJjZXMiOlsic3JjL3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUyxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUE2a0I3Qzs7R0FFRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQWUsS0FBVTtJQUNsRCxPQUFPLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEgsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBZSxLQUFVO0lBQ25ELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBRSxLQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUcsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBZSxLQUFVO0lBQ25ELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLEtBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFRLEtBQWEsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDO0FBQzVKLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQVMsRUFBVSxFQUFFLFVBQWtCO0lBQ3JFLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sc0JBQXNCLENBQU0sRUFBRSxFQUFFLFVBQVUsQ0FBc0IsQ0FBQztL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QUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQy9HLE9BQU87UUFDTCxFQUFFO1FBQ0YsS0FBSztRQUNMLE1BQU07UUFDTixrQkFBa0I7UUFDbEIsbUJBQW1CO1FBQ25CLE9BQU87UUFDUCxTQUFTLEVBQUUsQ0FBQyxPQUFPO1FBQ25CLFNBQVM7UUFDVCxVQUFVLEVBQUUsQ0FBQyxTQUFTO1FBQ3RCLE9BQU87UUFDUCxVQUFVLEVBQUUsQ0FBQyxPQUFPO1FBQ3BCLFNBQVM7UUFDVCxXQUFXLEVBQUUsQ0FBQyxTQUFTO1FBQ3ZCLFdBQVc7UUFDWCxhQUFhLEVBQUUsQ0FBQyxXQUFXO1FBQzNCLHFCQUFxQjtRQUNyQixRQUFRLEVBQUUsZ0JBQWdCO0tBQzNCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUNsQyxFQUFxQixFQUNyQixZQUFzQjtJQUV0QixNQUFNLFFBQVEsR0FBRyxZQUFZO1NBQzFCLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFNUQsT0FBTyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDbkcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJveGVkLCBpc0JveGVkIH0gZnJvbSAnLi9ib3hpbmcnO1xuaW1wb3J0IHsgZGVlcEVxdWFscywgaXNFbXB0eSB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCB0eXBlIEZvcm1Db250cm9sVmFsdWVUeXBlcyA9IEJveGVkPGFueT4gfCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZDtcbmV4cG9ydCB0eXBlIE5ncnhGb3JtQ29udHJvbElkID0gc3RyaW5nO1xuXG4vKipcbiAqIFRoaXMgdHlwZSByZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiBuYW1lZCBlcnJvcnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvbkVycm9ycyB7IHJlYWRvbmx5IFtrZXk6IHN0cmluZ106IGFueTsgfVxuZXhwb3J0IGludGVyZmFjZSBLZXlWYWx1ZSB7IFtrZXk6IHN0cmluZ106IGFueTsgfVxuXG4vKipcbiAqIEJhc2UgaW50ZXJmYWNlIGZvciBhbGwgdHlwZXMgb2YgZm9ybSBzdGF0ZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPiB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBmb3JtIHN0YXRlLiBVc3VhbGx5IHRoaXMgaXMgdGhlIG5hbWUgb3IgaW5kZXhcbiAgICogb2YgdGhlIGNvbnRyb2wgaW4gdGhlIGZvcm0gdmFsdWUgcHJlZml4ZWQgYnkgdGhlIElEIG9mIHRoZSBjb250YWluaW5nXG4gICAqIGdyb3VwIG9yIGFycmF5LCBlLmcuIGBNWV9GT1JNLnNvbWVUZXh0SW5wdXRgIG9yIGBNWV9GT1JNLjBgLlxuICAgKi9cbiAgcmVhZG9ubHkgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBmb3JtIHN0YXRlLlxuICAgKi9cbiAgcmVhZG9ubHkgdmFsdWU6IFRWYWx1ZTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgdGhlIHN0YXRlIGRvZXMgbm90IGhhdmUgYW55IGVycm9ycy5cbiAgICovXG4gIHJlYWRvbmx5IGlzVmFsaWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBzdGF0ZSBoYXMgYXQgbGVhc3Qgb25lIGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNJbnZhbGlkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgZXJyb3JzIG9mIHRoZSBzdGF0ZS4gVGhpcyBwcm9wZXJ0eSBhbHdheXMgaGFzIGEgdmFsdWUuXG4gICAqIElmIHRoZSBzdGF0ZSBoYXMgbm8gZXJyb3JzIHRoZSBwcm9wZXJ0eSBpcyBzZXQgdG8gYHt9YC5cbiAgICovXG4gIHJlYWRvbmx5IGVycm9yczogVmFsaWRhdGlvbkVycm9ycztcblxuICAvKipcbiAgICogVGhlIG5hbWVzIG9mIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdGlvbnMgY3VycmVudGx5IHJ1bm5pbmdcbiAgICogZm9yIHRoZSBzdGF0ZS5cbiAgICovXG4gIHJlYWRvbmx5IHBlbmRpbmdWYWxpZGF0aW9uczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbnRyb2wgaXMgY3VycmVudGx5IGJlaW5nXG4gICAqIGFzeW5jaHJvbm91c2x5IHZhbGlkYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlzVmFsaWRhdGlvblBlbmRpbmc6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHN0YXRlIGlzIGVuYWJsZWQuIFdoZW4gaXRcbiAgICogaXMgYGZhbHNlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBzdGF0ZSBpc1xuICAgKiBhbHdheXMgdmFsaWQgaWYgZGlzYWJsZWQpIGFuZCBgcGVuZGluZ1ZhbGlkYXRpb25zYCBpcyBhbHdheXMgYFtdYFxuICAgKiAoaS5lLiBhbGwgcGVuZGluZyB2YWxpZGF0aW9ucyBhcmUgY2FuY2VsbGVkKS5cbiAgICovXG4gIHJlYWRvbmx5IGlzRW5hYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgc3RhdGUgaXMgZGlzYWJsZWQuIFdoZW4gaXRcbiAgICogaXMgYHRydWVgIHRoZSBgZXJyb3JzYCBhcmUgYWx3YXlzIGB7fWAgKGkuZS4gdGhlIHN0YXRlIGlzXG4gICAqIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5cyBgW11gXG4gICAqIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIHN0YXRlJ3MgdmFsdWUgY2hhbmdlcy5cbiAgICovXG4gIHJlYWRvbmx5IGlzRGlydHk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHN0YXRlJ3MgdmFsdWUgbmV2ZXIgY2hhbmdlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlzUHJpc3RpbmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCBhcyBzb29uIGFzIHRoZSBzdGF0ZSBpcyB0b3VjaGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNUb3VjaGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBhcyBsb25nIGFzIHRoZSBzdGF0ZSBpcyBub3QgdG91Y2hlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlzVW50b3VjaGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWAgYXMgc29vbiBhcyB0aGUgc3RhdGUgaXMgc3VibWl0dGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNTdWJtaXR0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHN0YXRlIGlzIG5vdCBzdWJtaXR0ZWQuXG4gICAqL1xuICByZWFkb25seSBpc1Vuc3VibWl0dGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGEgY29udGFpbmVyIGZvciB1c2VyLWRlZmluZWQgbWV0YWRhdGEgKGUuZy4gaWZcbiAgICogeW91IHdhbnRlZCB0byBjb3VudCB0aGUgbnVtYmVyIG9mIHRpbWVzIGEgc3RhdGUncyB2YWx1ZSBoYXMgYmVlblxuICAgKiBjaGFuZ2VkLCB3aGF0IGtleXMgd2VyZSBwcmVzc2VkIG9uIGFuIGlucHV0LCBvciBob3cgb2Z0ZW4gYSBmb3JtXG4gICAqIGhhcyBiZWVuIHN1Ym1pdHRlZCBldGMuKS4gV2hpbGUgaXQgaXMgcG9zc2libGUgdG8gc3RvcmUgdGhpcyBraW5kXG4gICAqIG9mIGluZm9ybWF0aW9uIG91dHNpZGUgb2YgKipuZ3J4LWZvcm1zKiogaW4geW91ciBvd24gc3RhdGUgdGhlXG4gICAqIGB1c2VyRGVmaW5lZFByb3BlcnRpZXNgIGFsbG93IHlvdSB0byBzdG9yZSB5b3VyIG93biBtZXRhZGF0YVxuICAgKiBkaXJlY3RseSBpbiB0aGUgc3RhdGUuXG4gICAqL1xuICByZWFkb25seSB1c2VyRGVmaW5lZFByb3BlcnRpZXM6IEtleVZhbHVlO1xufVxuXG4vKipcbiAqIFN0YXRlIGFzc29jaWF0ZWQgd2l0aCBhIGZvcm0gY29udHJvbCwgaS5lLiBhbiBIVE1MIGZvcm1cbiAqIGVsZW1lbnQgaW4gdGhlIHZpZXcgKGUuZy4gYGlucHV0YCwgYHNlbGVjdGAsIGB0ZXh0YXJlYWAgZXRjLikuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybUNvbnRyb2xTdGF0ZTxUVmFsdWUgZXh0ZW5kcyBGb3JtQ29udHJvbFZhbHVlVHlwZXM+IGV4dGVuZHMgQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPiB7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGZvcm0gc3RhdGUuIEZvcm0gY29udHJvbHMgb25seSBzdXBwb3J0IHZhbHVlcyBvZlxuICAgKiB0eXBlIGBzdHJpbmdgLCBgbnVtYmVyYCwgYGJvb2xlYW5gLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYCB0b1xuICAgKiBrZWVwIHRoZSBzdGF0ZSBzdHJpbmcgc2VyaWFsaXphYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgdmFsdWU6IFRWYWx1ZTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgdGhlIGZvcm0gY29udHJvbCBkb2VzIG5vdCBoYXZlIGFueSBlcnJvcnMuXG4gICAqL1xuICByZWFkb25seSBpc1ZhbGlkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiB0aGUgZm9ybSBjb250cm9sIGhhcyBhdCBsZWFzdCBvbmUgZXJyb3IuXG4gICAqL1xuICByZWFkb25seSBpc0ludmFsaWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBlcnJvcnMgb2YgdGhlIGZvcm0gY29udHJvbC4gVGhpcyBwcm9wZXJ0eSBhbHdheXMgaGFzIGEgdmFsdWUuXG4gICAqIElmIHRoZSBjb250cm9sIGhhcyBubyBlcnJvcnMgdGhlIHByb3BlcnR5IGlzIHNldCB0byBge31gLlxuICAgKi9cbiAgcmVhZG9ubHkgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZXMgb2YgYWxsIGFzeW5jaHJvbm91cyB2YWxpZGF0aW9ucyBjdXJyZW50bHkgcnVubmluZyBmb3IgdGhlXG4gICAqIGZvcm0gY29udHJvbC5cbiAgICovXG4gIHJlYWRvbmx5IHBlbmRpbmdWYWxpZGF0aW9uczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbnRyb2wgaXMgY3VycmVudGx5IGJlaW5nXG4gICAqIGFzeW5jaHJvbm91c2x5IHZhbGlkYXRlZCAoaS5lLiB0aGlzIGlzIGB0cnVlYCBpZiBhbmQgb25seSBpZlxuICAgKiBgcGVuZGluZ1ZhbGlkYXRpb25zYCBpcyBub3QgZW1wdHkpLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNWYWxpZGF0aW9uUGVuZGluZzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZm9ybSBjb250cm9sIGlzIGVuYWJsZWQuXG4gICAqIFdoZW4gaXQgaXMgYGZhbHNlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBmb3JtXG4gICAqIGNvbnRyb2wgaXMgYWx3YXlzIHZhbGlkIGlmIGRpc2FibGVkKSBhbmQgYHBlbmRpbmdWYWxpZGF0aW9uc2BcbiAgICogaXMgYWx3YXlzIGBbXWAgKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXG4gICAqL1xuICByZWFkb25seSBpc0VuYWJsZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZvcm0gY29udHJvbCBpcyBkaXNhYmxlZC5cbiAgICogV2hlbiBpdCBpcyBgdHJ1ZWAgdGhlIGBlcnJvcnNgIGFyZSBhbHdheXMgYHt9YCAoaS5lLiB0aGUgZm9ybVxuICAgKiBjb250cm9sIGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgXG4gICAqIGlzIGFsd2F5cyBgW11gIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIHVuZGVybHlpbmdcbiAgICogYEZvcm1WaWV3QWRhcHRlcmAgb3IgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCByZXBvcnRzIGEgbmV3XG4gICAqIHZhbHVlIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIHJlYWRvbmx5IGlzRGlydHk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHVuZGVybHlpbmdcbiAgICogYEZvcm1WaWV3QWRhcHRlcmAgb3IgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCBoYXMgbmV2ZXJcbiAgICogcmVwb3J0ZWQgYSBuZXcgdmFsdWUuXG4gICAqL1xuICByZWFkb25seSBpc1ByaXN0aW5lOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWAgYmFzZWQgb24gdGhlIHJ1bGVzIG9mIHRoZVxuICAgKiB1bmRlcmx5aW5nIGBGb3JtVmlld0FkYXB0ZXJgICh1c3VhbGx5IG9uIGBibHVyYCBmb3IgbW9zdCBmb3JtXG4gICAqIGVsZW1lbnRzKS5cbiAgICovXG4gIHJlYWRvbmx5IGlzVG91Y2hlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgYXMgbG9uZyBhcyB0aGUgY29udHJvbCBpcyBub3QgdG91Y2hlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlzVW50b3VjaGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWAgYXMgc29vbiBhcyB0aGUgZ3JvdXAgb3IgYXJyYXlcbiAgICogY29udGFpbmluZyB0aGlzIGZvcm0gY29udHJvbCBpcyBzdWJtaXR0ZWQuIEEgZm9ybSBjb250cm9sIGNhblxuICAgKiBuZXZlciBiZSBzdWJtaXR0ZWQgb24gaXRzIG93bi5cbiAgICovXG4gIHJlYWRvbmx5IGlzU3VibWl0dGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBhcyBsb25nIGFzIHRoZSBzdGF0ZSBpcyBub3Qgc3VibWl0dGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNVbnN1Ym1pdHRlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGlmIHRoZSBmb3JtIGNvbnRyb2wgY3VycmVudGx5XG4gICAqIGhhcyBmb2N1cy4gVGhpcyBmZWF0dXJlIGlzIG9wdC1pbi4gVG8gZW5hYmxlIGl0IHlvdSBoYXZlIHRvXG4gICAqIGVuYWJsZSBpdCBmb3IgYSBnaXZlbiBmb3JtIGVsZW1lbnQgbGlrZSB0aGlzOlxuICAgKlxuYGBgaHRtbFxuPGlucHV0IFtuZ3J4Rm9ybUNvbnRyb2xTdGF0ZV09XCJzdGF0ZVwiXG4gICAgICBbbmdyeEVuYWJsZUZvY3VzVHJhY2tpbmddPVwidHJ1ZVwiIC8+XG5gYGBcbiAgICovXG4gIHJlYWRvbmx5IGlzRm9jdXNlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgdGhlIGNvbnRyb2wgY3VycmVudGx5IGRvZXMgbm90IGhhdmVcbiAgICogZm9jdXMgb3IgZm9jdXMgdHJhY2tpbmcgaXMgbm90IGVuYWJsZWQgZm9yIHRoZSBmb3JtIGNvbnRyb2wuXG4gICAqL1xuICByZWFkb25seSBpc1VuZm9jdXNlZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIHR5cGUgcmVwcmVzZW50cyB0aGUgY2hpbGQgY29udHJvbCBzdGF0ZXMgb2YgYSBmb3JtIGdyb3VwLlxuICovXG5leHBvcnQgdHlwZSBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+ID0ge1xuICByZWFkb25seSBbY29udHJvbElkIGluIGtleW9mIFRWYWx1ZV06IEZvcm1TdGF0ZTxUVmFsdWVbY29udHJvbElkXT47XG59O1xuXG4vKipcbiAqIEZvcm0gZ3JvdXBzIGFyZSBjb2xsZWN0aW9ucyBvZiBuYW1lZCBjb250cm9scy4gSnVzdCBsaWtlIGNvbnRyb2xzXG4gKiBncm91cHMgYXJlIHJlcHJlc2VudGVkIGFzIHBsYWluIHN0YXRlIG9iamVjdHMuIFRoZSBzdGF0ZSBvZiBhXG4gKiBncm91cCBpcyBkZXRlcm1pbmVkIGFsbW9zdCBmdWxseSBieSBpdHMgY2hpbGQgc3RhdGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1Hcm91cFN0YXRlPFRWYWx1ZSBleHRlbmRzIEtleVZhbHVlPiBleHRlbmRzIEFic3RyYWN0Q29udHJvbFN0YXRlPFRWYWx1ZT4ge1xuICAvKipcbiAgICogVGhlIGFnZ3JlZ2F0ZWQgdmFsdWUgb2YgdGhlIGZvcm0gZ3JvdXAuIFRoZSB2YWx1ZSBpcyBjb21wdXRlZCBieVxuICAgKiBhZ2dyZWdhdGluZyB0aGUgdmFsdWVzIG9mIGFsbCBjaGlsZHJlbiwgZS5nLlxuICAgKlxuYGBgdHlwZXNjcmlwdFxue1xuICBjaGlsZDE6ICdzb21lIHZhbHVlJyxcbiAgY2hpbGQyOiB7XG4gICAgbmVzdGVkQ2hpbGQ6IDEwLFxuICB9LFxufVxuYGBgXG4gICAqL1xuICByZWFkb25seSB2YWx1ZTogVFZhbHVlO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiB0aGUgZm9ybSBncm91cCBkb2VzIG5vdCBoYXZlIGFueSBlcnJvcnNcbiAgICogaXRzZWxmIGFuZCBub25lIG9mIGl0cyBjaGlsZHJlbiBoYXZlIGFueSBlcnJvcnMuXG4gICAqL1xuICByZWFkb25seSBpc1ZhbGlkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiB0aGUgZm9ybSBncm91cCBvciBhbnkgb2YgaXRzIGNoaWxkcmVuXG4gICAqIGhhdmUgYXQgbGVhc3Qgb25lIGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNJbnZhbGlkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgZXJyb3JzIG9mIHRoZSBmb3JtIGdyb3VwLiBUaGlzIHByb3BlcnR5IGlzIGNvbXB1dGVkIGJ5IG1lcmdpbmdcbiAgICogdGhlIGVycm9ycyBvZiB0aGUgZ3JvdXAgd2l0aCB0aGUgZXJyb3JzIG9mIGFsbCBpdHMgY2hpbGRyZW4gd2hlcmVcbiAgICogdGhlIGNoaWxkIGVycm9ycyBhcmUgYSBwcm9wZXJ0eSBvZiB0aGUgYGVycm9yc2Agb2JqZWN0IHByZWZpeGVkIHdpdGhcbiAgICogYW4gdW5kZXJzY29yZSwgZS5nLlxuICAgKlxuYGBgXG57XG4gIGdyb3VwRXJyb3I6IHRydWUsXG4gIF9jaGlsZDoge1xuICAgIGNoaWxkRXJyb3I6IHRydWUsXG4gIH0sXG59XG5gYGBcbiAgICpcbiAgICogSWYgbmVpdGhlciB0aGUgZ3JvdXAgbm9yIGFueSBjaGlsZHJlbiBoYXZlIGVycm9ycyB0aGUgcHJvcGVydHkgaXNcbiAgICogc2V0IHRvIGB7fWAuXG4gICAqL1xuICByZWFkb25seSBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnM7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lcyBvZiBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRpb25zIGN1cnJlbnRseSBydW5uaW5nIGZvciB0aGVcbiAgICogZm9ybSBncm91cC5cbiAgICovXG4gIHJlYWRvbmx5IHBlbmRpbmdWYWxpZGF0aW9uczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdyb3VwIG9yIGFueSBvZiBpdHMgY2hpbGRyZW5cbiAgICogYXJlIGN1cnJlbnRseSBiZWluZyBhc3luY2hyb25vdXNseSB2YWxpZGF0ZWQuXG4gICAqL1xuICByZWFkb25seSBpc1ZhbGlkYXRpb25QZW5kaW5nOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBmb3JtIGdyb3VwIGlzIGVuYWJsZWQuIEl0IGlzXG4gICAqIGB0cnVlYCBpZiBhbmQgb25seSBpZiBhdCBsZWFzdCBvbmUgb2YgaXRzIGNoaWxkIHN0YXRlcyBpc1xuICAgKiBlbmFibGVkLiBXaGVuIGl0IGlzIGBmYWxzZWAgdGhlIGBlcnJvcnNgIGFyZSBhbHdheXMgYHt9YCAoaS5lLlxuICAgKiB0aGUgZm9ybSBncm91cCBpcyBhbHdheXMgdmFsaWQgaWYgZGlzYWJsZWQpIGFuZCBgcGVuZGluZ1ZhbGlkYXRpb25zYFxuICAgKiBpcyBhbHdheXMgYFtdYCAoaS5lLiBhbGwgcGVuZGluZyB2YWxpZGF0aW9ucyBhcmUgY2FuY2VsbGVkKS5cbiAgICovXG4gIHJlYWRvbmx5IGlzRW5hYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZm9ybSBncm91cCBpcyBkaXNhYmxlZC4gSXQgaXNcbiAgICogYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiBpdHMgY2hpbGQgc3RhdGUgYXJlIGRpc2FibGVkLiBXaGVuXG4gICAqIGl0IGlzIGB0cnVlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBmb3JtIGdyb3VwXG4gICAqIGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5c1xuICAgKiBgW11gIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb3JtXG4gICAqIGdyb3VwJ3MgY2hpbGQgc3RhdGVzIGlzIG1hcmtlZCBhcyBkaXJ0eS5cbiAgICovXG4gIHJlYWRvbmx5IGlzRGlydHk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBncm91cCdzXG4gICAqIGNoaWxkIHN0YXRlcyBhcmUgcHJpc3RpbmUuXG4gICAqL1xuICByZWFkb25seSBpc1ByaXN0aW5lOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiBhbmQgb25seSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvcm1cbiAgICogZ3JvdXAncyBjaGlsZCBzdGF0ZXMgaXMgbWFya2VkIGFzIHRvdWNoZWQuXG4gICAqL1xuICByZWFkb25seSBpc1RvdWNoZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBncm91cCdzXG4gICAqIGNoaWxkIHN0YXRlcyBhcmUgdW50b3VjaGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNVbnRvdWNoZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCBhcyBzb29uIGFzIHRoZSBmb3JtIGdyb3VwIGlzXG4gICAqIHN1Ym1pdHRlZC4gVGhpcyBpcyB0cmFja2VkIGJ5IHRoZSBgTmdyeEZvcm1EaXJlY3RpdmVgLCB3aGljaFxuICAgKiBuZWVkcyB0byBiZSBhcHBsaWVkIHRvIGEgZm9ybSBsaWtlIHRoaXM6XG4gICAqXG5gYGBodG1sXG48Zm9ybSBbbmdyeEZvcm1TdGF0ZV09XCJncm91cFN0YXRlXCI+XG48L2Zvcm0+XG5gYGBcbiAgICpcbiAgICogTm90ZSB0aGF0IGFwcGx5aW5nIHRoaXMgZGlyZWN0aXZlIHRvIGEgZm9ybSBwcmV2ZW50cyBub3JtYWwgZm9ybVxuICAgKiBzdWJtaXNzaW9uIHNpbmNlIHRoYXQgZG9lcyBub3QgbWFrZSBtdWNoIHNlbnNlIGZvciBuZ3J4IGZvcm1zLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNTdWJtaXR0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHN0YXRlIGlzIG5vdCBzdWJtaXR0ZWQuXG4gICAqL1xuICByZWFkb25seSBpc1Vuc3VibWl0dGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNvbnRhaW5zIGFsbCBjaGlsZCBzdGF0ZXMgb2YgdGhlIGZvcm0gZ3JvdXAuIEFzXG4gICAqIHlvdSBtYXkgaGF2ZSBub3RpY2VkIHRoZSB0eXBlIG9mIGVhY2ggY2hpbGQgc3RhdGUgaXNcbiAgICogYEFic3RyYWN0Q29udHJvbFN0YXRlYCB3aGljaCBzb21ldGltZXMgZm9yY2VzIHlvdSB0byBjYXN0IHRoZVxuICAgKiBzdGF0ZSBleHBsaWNpdGx5LiBJdCBpcyBub3QgcG9zc2libGUgdG8gaW1wcm92ZSB0aGlzIHR5cGluZ1xuICAgKiB1bnRpbCBbY29uZGl0aW9uYWwgbWFwcGVkIHR5cGVzXShodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEyNDI0KVxuICAgKiBhcmUgYWRkZWQgdG8gVHlwZVNjcmlwdC5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnRyb2xzOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+O1xufVxuXG4vKipcbiAqIEZvcm0gYXJyYXlzIGFyZSBjb2xsZWN0aW9ucyBvZiBjb250cm9scy4gVGhleSBhcmUgcmVwcmVzZW50ZWQgYXNcbiAqIHBsYWluIHN0YXRlIGFycmF5cy4gVGhlIHN0YXRlIG9mIGFuIGFycmF5IGlzIGRldGVybWluZWQgYWxtb3N0XG4gKiBmdWxseSBieSBpdHMgY2hpbGQgc3RhdGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1BcnJheVN0YXRlPFRWYWx1ZT4gZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xTdGF0ZTxyZWFkb25seSBUVmFsdWVbXT4ge1xuICAvKipcbiAgICogVGhlIGFnZ3JlZ2F0ZWQgdmFsdWUgb2YgdGhlIGZvcm0gYXJyYXkuIFRoZSB2YWx1ZSBpcyBjb21wdXRlZCBieVxuICAgKiBhZ2dyZWdhdGluZyB0aGUgdmFsdWVzIG9mIGFsbCBjaGlsZHJlbiBpbnRvIGFuIGFycmF5LlxuICAgKi9cbiAgcmVhZG9ubHkgdmFsdWU6IFRWYWx1ZVtdO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiB0aGUgZm9ybSBhcnJheSBkb2VzIG5vdCBoYXZlIGFueSBlcnJvcnNcbiAgICogaXRzZWxmIGFuZCBub25lIG9mIGl0cyBjaGlsZHJlbiBoYXZlIGFueSBlcnJvcnMuXG4gICAqL1xuICByZWFkb25seSBpc1ZhbGlkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiB0aGUgZm9ybSBhcnJheSBvciBhbnkgb2YgaXRzIGNoaWxkcmVuXG4gICAqIGhhdmUgYXQgbGVhc3Qgb25lIGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNJbnZhbGlkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgZXJyb3JzIG9mIHRoZSBmb3JtIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIGNvbXB1dGVkIGJ5IG1lcmdpbmdcbiAgICogdGhlIGVycm9ycyBvZiB0aGUgYXJyYXkgd2l0aCB0aGUgZXJyb3JzIG9mIGFsbCBpdHMgY2hpbGRyZW4gd2hlcmVcbiAgICogdGhlIGNoaWxkIGVycm9ycyBhcmUgYSBwcm9wZXJ0eSBvZiB0aGUgYGVycm9yc2Agb2JqZWN0IHByZWZpeGVkIHdpdGhcbiAgICogYW4gdW5kZXJzY29yZSwgZS5nLlxuICAgKlxuYGBgXG57XG4gIGFycmF5RXJyb3I6IHRydWUsXG4gIF8wOiB7XG4gICAgY2hpbGRFcnJvcjogdHJ1ZSxcbiAgfSxcbn1cbmBgYFxuICAgKlxuICAgKiBJZiBuZWl0aGVyIHRoZSBhcnJheSBub3IgYW55IGNoaWxkcmVuIGhhdmUgZXJyb3JzIHRoZSBwcm9wZXJ0eSBpc1xuICAgKiBzZXQgdG8gYHt9YC5cbiAgICovXG4gIHJlYWRvbmx5IGVycm9yczogVmFsaWRhdGlvbkVycm9ycztcblxuICAvKipcbiAgICogVGhlIG5hbWVzIG9mIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdGlvbnMgY3VycmVudGx5IHJ1bm5pbmcgZm9yIHRoZVxuICAgKiBmb3JtIGFycmF5LlxuICAgKi9cbiAgcmVhZG9ubHkgcGVuZGluZ1ZhbGlkYXRpb25zOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgYXJyYXkgb3IgYW55IG9mIGl0cyBjaGlsZHJlblxuICAgKiBhcmUgY3VycmVudGx5IGJlaW5nIGFzeW5jaHJvbm91c2x5IHZhbGlkYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlzVmFsaWRhdGlvblBlbmRpbmc6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZvcm0gYXJyYXkgaXMgZW5hYmxlZC4gSXQgaXNcbiAgICogYHRydWVgIGlmIGFuZCBvbmx5IGlmIGF0IGxlYXN0IG9uZSBvZiBpdHMgY2hpbGQgc3RhdGVzIGlzXG4gICAqIGVuYWJsZWQuIFdoZW4gaXQgaXMgYGZhbHNlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuXG4gICAqIHRoZSBmb3JtIGFycmF5IGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgXG4gICAqIGlzIGFsd2F5cyBgW11gIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNFbmFibGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBmb3JtIGFycmF5IGlzIGRpc2FibGVkLiBJdCBpc1xuICAgKiBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYWxsIG9mIGl0cyBjaGlsZCBzdGF0ZXMgYXJlIGRpc2FibGVkLiBXaGVuXG4gICAqIGl0IGlzIGB0cnVlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBmb3JtIGFycmF5XG4gICAqIGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5c1xuICAgKiBgW11gIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb3JtXG4gICAqIGFycmF5J3MgY2hpbGQgc3RhdGVzIGlzIG1hcmtlZCBhcyBkaXJ0eS5cbiAgICovXG4gIHJlYWRvbmx5IGlzRGlydHk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBhcnJheSdzXG4gICAqIGNoaWxkIHN0YXRlcyBhcmUgcHJpc3RpbmUuXG4gICAqL1xuICByZWFkb25seSBpc1ByaXN0aW5lOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiBhbmQgb25seSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvcm1cbiAgICogYXJyYXkncyBjaGlsZCBzdGF0ZXMgaXMgbWFya2VkIGFzIHRvdWNoZWQuXG4gICAqL1xuICByZWFkb25seSBpc1RvdWNoZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBhcnJheSdzXG4gICAqIGNoaWxkIHN0YXRlcyBhcmUgdW50b3VjaGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNVbnRvdWNoZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCBhcyBzb29uIGFzIHRoZSBmb3JtIGFycmF5IGlzXG4gICAqIHN1Ym1pdHRlZC4gVGhpcyBpcyB0cmFja2VkIGJ5IHRoZSBgTmdyeEZvcm1EaXJlY3RpdmVgLCB3aGljaFxuICAgKiBuZWVkcyB0byBiZSBhcHBsaWVkIHRvIGEgZm9ybSBsaWtlIHRoaXM6XG4gICAqXG5gYGBodG1sXG48Zm9ybSBbbmdyeEZvcm1TdGF0ZV09XCJhcnJheVN0YXRlXCI+XG48L2Zvcm0+XG5gYGBcbiAgICpcbiAgICogTm90ZSB0aGF0IGFwcGx5aW5nIHRoaXMgZGlyZWN0aXZlIHRvIGEgZm9ybSBwcmV2ZW50cyBub3JtYWwgZm9ybVxuICAgKiBzdWJtaXNzaW9uIHNpbmNlIHRoYXQgZG9lcyBub3QgbWFrZSBtdWNoIHNlbnNlIGZvciBuZ3J4IGZvcm1zLlxuICAgKi9cbiAgcmVhZG9ubHkgaXNTdWJtaXR0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHN0YXRlIGlzIG5vdCBzdWJtaXR0ZWQuXG4gICAqL1xuICByZWFkb25seSBpc1Vuc3VibWl0dGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNvbnRhaW5zIGFsbCBjaGlsZCBzdGF0ZXMgb2YgdGhlIGZvcm0gYXJyYXkuIEFzXG4gICAqIHlvdSBtYXkgaGF2ZSBub3RpY2VkIHRoZSB0eXBlIG9mIGVhY2ggY2hpbGQgc3RhdGUgaXNcbiAgICogYEFic3RyYWN0Q29udHJvbFN0YXRlYCB3aGljaCBzb21ldGltZXMgZm9yY2VzIHlvdSB0byBjYXN0IHRoZVxuICAgKiBzdGF0ZSBleHBsaWNpdGx5LiBJdCBpcyBub3QgcG9zc2libGUgdG8gaW1wcm92ZSB0aGlzIHR5cGluZ1xuICAgKiB1bnRpbCBbY29uZGl0aW9uYWwgbWFwcGVkIHR5cGVzXShodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEyNDI0KVxuICAgKiBhcmUgYWRkZWQgdG8gVHlwZVNjcmlwdC5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnRyb2xzOiByZWFkb25seSBGb3JtU3RhdGU8VFZhbHVlPltdO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBoZWxwZXIgdHlwZSB0aGF0IGFsbG93cyB3b3JraW5nIGFyb3VuZCB0aGUgZGlzdHJpYnV0aXZlbmVzc1xuICogb2YgY29uZGl0aW9uYWwgdHlwZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlV3JhcHBlcjxUPiB7XG4gIHQ6IFQ7XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciB0eXBlIHRoYXQgaW5mZXJzIHRoZSBjb3JyZWN0IGZvcm0gc3RhdGUgdHlwZSBiYXNlZFxuICogb24gdGhlIGJveGVkIHR5cGUgY29udGFpbmVkIGluIHRoZSBpbmZlcmVuY2Ugd3JhcHBlci5cbiAqL1xuZXhwb3J0IHR5cGUgSW5mZXJyZWRCb3hlZEZvcm1TdGF0ZTxUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxhbnk+PiA9XG4gIFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPEJveGVkPGluZmVyIFU+PiA/IEZvcm1Db250cm9sU3RhdGU8Qm94ZWQ8VT4+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Qm94ZWQ8aW5mZXIgVT4gfCB1bmRlZmluZWQ+ID8gRm9ybUNvbnRyb2xTdGF0ZTxCb3hlZDxVPiB8IHVuZGVmaW5lZD5cbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxCb3hlZDxpbmZlciBVPiB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxCb3hlZDxVPiB8IG51bGw+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Qm94ZWQ8aW5mZXIgVT4gfCB1bmRlZmluZWQgfCBudWxsPiA/IEZvcm1Db250cm9sU3RhdGU8Qm94ZWQ8VT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICA6IG5ldmVyXG4gIDtcblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIHR5cGUgdGhhdCBpbmZlcnMgdGhlIGNvcnJlY3QgZm9ybSBzdGF0ZSB0eXBlIGJhc2VkXG4gKiBvbiB0aGUgc3RyaW5nIHR5cGUgY29udGFpbmVkIGluIHRoZSBpbmZlcmVuY2Ugd3JhcHBlci5cbiAqL1xuZXhwb3J0IHR5cGUgSW5mZXJyZWRTdHJpbmdGb3JtU3RhdGU8VCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8YW55Pj4gPVxuICBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxzdHJpbmc+ID8gRm9ybUNvbnRyb2xTdGF0ZTxzdHJpbmc+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8c3RyaW5nIHwgdW5kZWZpbmVkPiA/IEZvcm1Db250cm9sU3RhdGU8c3RyaW5nIHwgdW5kZWZpbmVkPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHN0cmluZyB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxzdHJpbmcgfCBudWxsPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsPlxuICA6IG5ldmVyXG4gIDtcblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIHR5cGUgdGhhdCBpbmZlcnMgdGhlIGNvcnJlY3QgZm9ybSBzdGF0ZSB0eXBlIGJhc2VkXG4gKiBvbiB0aGUgbnVtYmVyIHR5cGUgY29udGFpbmVkIGluIHRoZSBpbmZlcmVuY2Ugd3JhcHBlci5cbiAqL1xuZXhwb3J0IHR5cGUgSW5mZXJyZWROdW1iZXJGb3JtU3RhdGU8VCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8YW55Pj4gPVxuICBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxudW1iZXI+ID8gRm9ybUNvbnRyb2xTdGF0ZTxudW1iZXI+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8bnVtYmVyIHwgdW5kZWZpbmVkPiA/IEZvcm1Db250cm9sU3RhdGU8bnVtYmVyIHwgdW5kZWZpbmVkPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPG51bWJlciB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxudW1iZXIgfCBudWxsPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPG51bWJlciB8IHVuZGVmaW5lZCB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsPlxuICA6IG5ldmVyXG4gIDtcblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIHR5cGUgdGhhdCBpbmZlcnMgdGhlIGNvcnJlY3QgZm9ybSBzdGF0ZSB0eXBlIGJhc2VkXG4gKiBvbiB0aGUgYm9vbGVhbiB0eXBlIGNvbnRhaW5lZCBpbiB0aGUgaW5mZXJlbmNlIHdyYXBwZXIuXG4gKi9cbmV4cG9ydCB0eXBlIEluZmVycmVkQm9vbGVhbkZvcm1TdGF0ZTxUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxhbnk+PiA9XG4gIFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPGJvb2xlYW4+ID8gRm9ybUNvbnRyb2xTdGF0ZTxib29sZWFuPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPGJvb2xlYW4gfCB1bmRlZmluZWQ+ID8gRm9ybUNvbnRyb2xTdGF0ZTxib29sZWFuIHwgdW5kZWZpbmVkPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPGJvb2xlYW4gfCBudWxsPiA/IEZvcm1Db250cm9sU3RhdGU8Ym9vbGVhbiB8IG51bGw+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Ym9vbGVhbiB8IHVuZGVmaW5lZCB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxib29sZWFuIHwgdW5kZWZpbmVkIHwgbnVsbD5cbiAgOiBuZXZlclxuICA7XG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciB0eXBlIHRoYXQgaW5mZXJzIHRoZSBjb3JyZWN0IGZvcm0gc3RhdGUgdHlwZSBiYXNlZFxuICogb24gdGhlIHR5cGUgY29udGFpbmVkIGluIHRoZSBpbmZlcmVuY2Ugd3JhcHBlci5cbiAqL1xuZXhwb3J0IHR5cGUgSW5mZXJyZWRGb3JtU3RhdGU8VCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8YW55Pj4gPVxuICAvLyAoYWIpdXNlICdzeW1ib2wnIHRvIGNhdGNoICdhbnknIHR5cGluZ1xuICBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxzeW1ib2w+ID8gQWJzdHJhY3RDb250cm9sU3RhdGU8YW55PlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHVuZGVmaW5lZD4gPyBBYnN0cmFjdENvbnRyb2xTdGF0ZTxhbnk+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8bnVsbD4gPyBBYnN0cmFjdENvbnRyb2xTdGF0ZTxhbnk+XG5cbiAgLy8gY29udHJvbFxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPEJveGVkPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPiA/IEluZmVycmVkQm94ZWRGb3JtU3RhdGU8VD5cbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsPiA/IEluZmVycmVkU3RyaW5nRm9ybVN0YXRlPFQ+XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8bnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBJbmZlcnJlZE51bWJlckZvcm1TdGF0ZTxUPlxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPGJvb2xlYW4gfCB1bmRlZmluZWQgfCBudWxsPiA/IEluZmVycmVkQm9vbGVhbkZvcm1TdGF0ZTxUPlxuXG4gIC8vIGFycmF5XG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8cmVhZG9ubHkgKGluZmVyIFUpW10gfCB1bmRlZmluZWQgfCBudWxsPiA/IEZvcm1BcnJheVN0YXRlPFU+XG5cbiAgLy8gZ3JvdXBcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxpbmZlciBVIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBGb3JtR3JvdXBTdGF0ZTxVPlxuXG4gIC8vIGZhbGxiYWNrIHR5cGUgKHRoaXMgY2FzZSBzaG91bGQgbmV2ZXIgKG5vIHB1biBpbnRlbmRlZCkgYmUgaGl0KVxuICA6IG5ldmVyXG4gIDtcblxuLyoqXG4gKiBUaGlzIGlzIGEgdHlwZSB0aGF0IGNhbiBpbmZlciB0aGUgY29uY3JldGUgdHlwZSBvZiBhIGZvcm0gc3RhdGUgYmFzZWRcbiAqIG9uIHRoZSBnaXZlbiB0eXBlIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IHR5cGUgRm9ybVN0YXRlPFQ+ID0gSW5mZXJyZWRGb3JtU3RhdGU8SW5mZXJlbmNlV3JhcHBlcjxUPj47XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBmb3JtIHN0YXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtU3RhdGU8VFZhbHVlID0gYW55PihzdGF0ZTogYW55KTogc3RhdGUgaXMgRm9ybVN0YXRlPFRWYWx1ZT4ge1xuICByZXR1cm4gISFzdGF0ZSAmJiBzdGF0ZS5oYXNPd25Qcm9wZXJ0eSgnaWQnKSAmJiBzdGF0ZS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSAmJiBzdGF0ZS5oYXNPd25Qcm9wZXJ0eSgnZXJyb3JzJyk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYW4gYXJyYXkgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5U3RhdGU8VFZhbHVlID0gYW55PihzdGF0ZTogYW55KTogc3RhdGUgaXMgRm9ybUFycmF5U3RhdGU8VFZhbHVlPiB7XG4gIHJldHVybiBpc0Zvcm1TdGF0ZShzdGF0ZSkgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkoJ2NvbnRyb2xzJykgJiYgQXJyYXkuaXNBcnJheSgoc3RhdGUgYXMgYW55KS5jb250cm9scyk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBncm91cCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdXBTdGF0ZTxUVmFsdWUgPSBhbnk+KHN0YXRlOiBhbnkpOiBzdGF0ZSBpcyBGb3JtR3JvdXBTdGF0ZTxUVmFsdWU+IHtcbiAgcmV0dXJuIGlzRm9ybVN0YXRlKHN0YXRlKSAmJiBzdGF0ZS5oYXNPd25Qcm9wZXJ0eSgnY29udHJvbHMnKSAmJiAhQXJyYXkuaXNBcnJheSgoc3RhdGUgYXMgYW55KS5jb250cm9scykgJiYgdHlwZW9mIChzdGF0ZSBhcyBhbnkpLmNvbnRyb2xzICE9PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTdGF0ZTxUVmFsdWU+KGlkOiBzdHJpbmcsIGNoaWxkVmFsdWU6IFRWYWx1ZSk6IEZvcm1TdGF0ZTxUVmFsdWU+IHtcbiAgaWYgKGlzQm94ZWQoY2hpbGRWYWx1ZSkpIHtcbiAgICByZXR1cm4gY3JlYXRlRm9ybUNvbnRyb2xTdGF0ZTxhbnk+KGlkLCBjaGlsZFZhbHVlKSBhcyBGb3JtU3RhdGU8VFZhbHVlPjtcbiAgfVxuXG4gIGlmIChjaGlsZFZhbHVlICE9PSBudWxsICYmIEFycmF5LmlzQXJyYXkoY2hpbGRWYWx1ZSkpIHtcbiAgICByZXR1cm4gY3JlYXRlRm9ybUFycmF5U3RhdGUoaWQsIGNoaWxkVmFsdWUpIGFzIEZvcm1TdGF0ZTxUVmFsdWU+O1xuICB9XG5cbiAgaWYgKGNoaWxkVmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIGNoaWxkVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZvcm1Hcm91cFN0YXRlKGlkLCBjaGlsZFZhbHVlKSBhcyBGb3JtU3RhdGU8VFZhbHVlPjtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVGb3JtQ29udHJvbFN0YXRlPGFueT4oaWQsIGNoaWxkVmFsdWUpIGFzIEZvcm1TdGF0ZTxUVmFsdWU+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5Rm9ybUNvbnRyb2xWYWx1ZUlzVmFsaWQ8VFZhbHVlPih2YWx1ZTogVFZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICd1bmRlZmluZWQnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICghaXNCb3hlZCh2YWx1ZSkpIHtcbiAgICBjb25zdCBlcnJvck1zZyA9ICdGb3JtIGNvbnRyb2wgc3RhdGVzIG9ubHkgc3VwcG9ydCB1bmRlZmluZWQsIG51bGwsIHN0cmluZywgbnVtYmVyLCBhbmQgYm9vbGVhbiB2YWx1ZXMgYXMgd2VsbCBhcyBib3hlZCB2YWx1ZXMnO1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvck1zZ307IGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0gb2YgdHlwZSAke3R5cGVvZiB2YWx1ZX1gKTsgLy8gYDtcbiAgfVxuXG4gIGlmICh2YWx1ZS52YWx1ZSA9PT0gbnVsbCB8fCBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICd1bmRlZmluZWQnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZS52YWx1ZSkgPj0gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IHNlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9IEpTT04ucGFyc2Uoc2VyaWFsaXplZCk7XG5cbiAgaWYgKGRlZXBFcXVhbHModmFsdWUsIGRlc2VyaWFsaXplZCkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYEEgZm9ybSBjb250cm9sIHZhbHVlIG11c3QgYmUgc2VyaWFsaXphYmxlIChpLmUuIHZhbHVlID09PSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkpLCBnb3Q6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGZvcm0gY29udHJvbCBzdGF0ZSB3aXRoIGFuIElEIGFuZCBhIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRm9ybUNvbnRyb2xTdGF0ZTxUVmFsdWUgZXh0ZW5kcyBGb3JtQ29udHJvbFZhbHVlVHlwZXM+KFxuICBpZDogTmdyeEZvcm1Db250cm9sSWQsXG4gIHZhbHVlOiBUVmFsdWUsXG4pOiBGb3JtQ29udHJvbFN0YXRlPFRWYWx1ZT4ge1xuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIHZhbHVlOiB2ZXJpZnlGb3JtQ29udHJvbFZhbHVlSXNWYWxpZCh2YWx1ZSksXG4gICAgZXJyb3JzOiB7fSxcbiAgICBwZW5kaW5nVmFsaWRhdGlvbnM6IFtdLFxuICAgIGlzVmFsaWRhdGlvblBlbmRpbmc6IGZhbHNlLFxuICAgIGlzVmFsaWQ6IHRydWUsXG4gICAgaXNJbnZhbGlkOiBmYWxzZSxcbiAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgaXNEaXNhYmxlZDogZmFsc2UsXG4gICAgaXNEaXJ0eTogZmFsc2UsXG4gICAgaXNQcmlzdGluZTogdHJ1ZSxcbiAgICBpc1RvdWNoZWQ6IGZhbHNlLFxuICAgIGlzVW50b3VjaGVkOiB0cnVlLFxuICAgIGlzU3VibWl0dGVkOiBmYWxzZSxcbiAgICBpc1Vuc3VibWl0dGVkOiB0cnVlLFxuICAgIGlzRm9jdXNlZDogZmFsc2UsXG4gICAgaXNVbmZvY3VzZWQ6IHRydWUsXG4gICAgdXNlckRlZmluZWRQcm9wZXJ0aWVzOiB7fSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Hcm91cFZhbHVlPFRWYWx1ZSBleHRlbmRzIEtleVZhbHVlPihcbiAgY29udHJvbHM6IEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4sXG4gIG9yaWdpbmFsVmFsdWU6IFRWYWx1ZSxcbik6IFRWYWx1ZSB7XG4gIGxldCBoYXNDaGFuZ2VkID0gT2JqZWN0LmtleXMob3JpZ2luYWxWYWx1ZSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhjb250cm9scykubGVuZ3RoO1xuICBjb25zdCBuZXdWYWx1ZSA9IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5yZWR1Y2UoKHJlcywga2V5OiBrZXlvZiBUVmFsdWUpID0+IHtcbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBvcmlnaW5hbFZhbHVlW2tleV0gIT09IGNvbnRyb2xzW2tleV0udmFsdWU7XG4gICAgcmVzW2tleV0gPSBjb250cm9sc1trZXldLnZhbHVlO1xuICAgIHJldHVybiByZXM7XG4gIH0sIHt9IGFzIFRWYWx1ZSk7XG5cbiAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXdWYWx1ZSA6IG9yaWdpbmFsVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtR3JvdXBFcnJvcnM8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxuICBjb250cm9sczogRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPixcbiAgb3JpZ2luYWxFcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsXG4pOiBWYWxpZGF0aW9uRXJyb3JzIHtcbiAgbGV0IGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgY29uc3QgZ3JvdXBFcnJvcnMgPVxuICAgIE9iamVjdC5rZXlzKG9yaWdpbmFsRXJyb3JzKVxuICAgICAgLmZpbHRlcihrZXkgPT4gIWtleS5zdGFydHNXaXRoKCdfJykpXG4gICAgICAucmVkdWNlKChyZXMsIGtleSkgPT4gT2JqZWN0LmFzc2lnbihyZXMsIHsgW2tleV06IG9yaWdpbmFsRXJyb3JzW2tleV0gfSksIHt9IGFzIFZhbGlkYXRpb25FcnJvcnMpO1xuXG4gIGNvbnN0IG5ld0Vycm9ycyA9IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5yZWR1Y2UoKHJlcywga2V5OiBhbnkpID0+IHtcbiAgICBjb25zdCBjb250cm9sRXJyb3JzID0gY29udHJvbHNba2V5XS5lcnJvcnM7XG4gICAgaWYgKCFpc0VtcHR5KGNvbnRyb2xFcnJvcnMpKSB7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBvcmlnaW5hbEVycm9yc1tgXyR7a2V5fWBdICE9PSBjb250cm9sRXJyb3JzO1xuICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHsgW2BfJHtrZXl9YF06IGNvbnRyb2xzW2tleV0uZXJyb3JzIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBvcmlnaW5hbEVycm9ycy5oYXNPd25Qcm9wZXJ0eShgXyR7a2V5fWApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH0sIGdyb3VwRXJyb3JzKTtcblxuICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBPYmplY3Qua2V5cyhvcmlnaW5hbEVycm9ycykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhuZXdFcnJvcnMpLmxlbmd0aDtcblxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0Vycm9ycyA6IG9yaWdpbmFsRXJyb3JzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUdyb3VwU3RhdGU8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxuICBpZDogc3RyaW5nLFxuICBjb250cm9sczogRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPixcbiAgdmFsdWU6IFRWYWx1ZSxcbiAgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzLFxuICBwZW5kaW5nVmFsaWRhdGlvbnM6IHJlYWRvbmx5IHN0cmluZ1tdLFxuICB1c2VyRGVmaW5lZFByb3BlcnRpZXM6IEtleVZhbHVlLFxuICBmbGFnczoge1xuICAgIHdhc09yU2hvdWxkQmVEaXJ0eT86IGJvb2xlYW47XG4gICAgd2FzT3JTaG91bGRCZUVuYWJsZWQ/OiBib29sZWFuO1xuICAgIHdhc09yU2hvdWxkQmVUb3VjaGVkPzogYm9vbGVhbjtcbiAgICB3YXNPclNob3VsZEJlU3VibWl0dGVkPzogYm9vbGVhbjtcbiAgfSxcbik6IEZvcm1Hcm91cFN0YXRlPFRWYWx1ZT4ge1xuICB2YWx1ZSA9IGdldEZvcm1Hcm91cFZhbHVlPFRWYWx1ZT4oY29udHJvbHMsIHZhbHVlKTtcbiAgZXJyb3JzID0gZ2V0Rm9ybUdyb3VwRXJyb3JzKGNvbnRyb2xzLCBlcnJvcnMpO1xuICBjb25zdCBpc1ZhbGlkID0gaXNFbXB0eShlcnJvcnMpO1xuICBjb25zdCBpc0RpcnR5ID0gZmxhZ3Mud2FzT3JTaG91bGRCZURpcnR5IHx8IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5zb21lKGtleSA9PiBjb250cm9sc1trZXldLmlzRGlydHkpO1xuICBjb25zdCBpc0VuYWJsZWQgPSBmbGFncy53YXNPclNob3VsZEJlRW5hYmxlZCB8fCBPYmplY3Qua2V5cyhjb250cm9scykuc29tZShrZXkgPT4gY29udHJvbHNba2V5XS5pc0VuYWJsZWQpO1xuICBjb25zdCBpc1RvdWNoZWQgPSBmbGFncy53YXNPclNob3VsZEJlVG91Y2hlZCB8fCBPYmplY3Qua2V5cyhjb250cm9scykuc29tZShrZXkgPT4gY29udHJvbHNba2V5XS5pc1RvdWNoZWQpO1xuICBjb25zdCBpc1N1Ym1pdHRlZCA9IGZsYWdzLndhc09yU2hvdWxkQmVTdWJtaXR0ZWQgfHwgT2JqZWN0LmtleXMoY29udHJvbHMpLnNvbWUoa2V5ID0+IGNvbnRyb2xzW2tleV0uaXNTdWJtaXR0ZWQpO1xuICBjb25zdCBpc1ZhbGlkYXRpb25QZW5kaW5nID0gcGVuZGluZ1ZhbGlkYXRpb25zLmxlbmd0aCA+IDAgfHwgT2JqZWN0LmtleXMoY29udHJvbHMpLnNvbWUoa2V5ID0+IGNvbnRyb2xzW2tleV0uaXNWYWxpZGF0aW9uUGVuZGluZyk7XG4gIHJldHVybiB7XG4gICAgaWQsXG4gICAgdmFsdWUsXG4gICAgZXJyb3JzLFxuICAgIHBlbmRpbmdWYWxpZGF0aW9ucyxcbiAgICBpc1ZhbGlkYXRpb25QZW5kaW5nLFxuICAgIGlzVmFsaWQsXG4gICAgaXNJbnZhbGlkOiAhaXNWYWxpZCxcbiAgICBpc0VuYWJsZWQsXG4gICAgaXNEaXNhYmxlZDogIWlzRW5hYmxlZCxcbiAgICBpc0RpcnR5LFxuICAgIGlzUHJpc3RpbmU6ICFpc0RpcnR5LFxuICAgIGlzVG91Y2hlZCxcbiAgICBpc1VudG91Y2hlZDogIWlzVG91Y2hlZCxcbiAgICBpc1N1Ym1pdHRlZCxcbiAgICBpc1Vuc3VibWl0dGVkOiAhaXNTdWJtaXR0ZWQsXG4gICAgdXNlckRlZmluZWRQcm9wZXJ0aWVzLFxuICAgIGNvbnRyb2xzLFxuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGZvcm0gZ3JvdXAgc3RhdGUgd2l0aCBhbiBJRCBhbmQgYSB2YWx1ZS5cbiAqIEZyb20gdGhlIHZhbHVlIHRoZSBzaGFwZSBvZiB0aGUgZ3JvdXAgc3RhdGUgaXMgaW5mZXJyZWQsIGkuZS5cbiAqIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBpbmZlcnJlZCBhcyBmb3JtIGdyb3VwcywgYXJyYXkgcHJvcGVydGllc1xuICogYXJlIGluZmVycmVkIGFzIGZvcm0gYXJyYXlzLCBhbmQgcHJpbWl0aXZlIHByb3BlcnRpZXMgYXJlIGluZmVycmVkXG4gKiBhcyBmb3JtIGNvbnRyb2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRm9ybUdyb3VwU3RhdGU8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxuICBpZDogTmdyeEZvcm1Db250cm9sSWQsXG4gIGluaXRpYWxWYWx1ZTogVFZhbHVlLFxuKTogRm9ybUdyb3VwU3RhdGU8VFZhbHVlPiB7XG4gIGNvbnN0IGNvbnRyb2xzID0gT2JqZWN0LmtleXMoaW5pdGlhbFZhbHVlKVxuICAgIC5tYXAoKGtleToga2V5b2YgVFZhbHVlKSA9PiBba2V5LCBjcmVhdGVDaGlsZFN0YXRlKGAke2lkfS4ke2tleX1gLCBpbml0aWFsVmFsdWVba2V5XSldIGFzIFtzdHJpbmcsIEZvcm1TdGF0ZTxhbnk+XSlcbiAgICAucmVkdWNlKChyZXMsIFtjb250cm9sSWQsIHN0YXRlXSkgPT4gT2JqZWN0LmFzc2lnbihyZXMsIHsgW2NvbnRyb2xJZF06IHN0YXRlIH0pLCB7fSBhcyBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+KTtcblxuICByZXR1cm4gY29tcHV0ZUdyb3VwU3RhdGUoaWQsIGNvbnRyb2xzLCBpbml0aWFsVmFsdWUsIHt9LCBbXSwge30sIHsgd2FzT3JTaG91bGRCZUVuYWJsZWQ6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1BcnJheVZhbHVlPFRWYWx1ZT4oXG4gIGNvbnRyb2xzOiByZWFkb25seSBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+W10sXG4gIG9yaWdpbmFsVmFsdWU6IFRWYWx1ZVtdLFxuKTogVFZhbHVlW10ge1xuICBsZXQgaGFzQ2hhbmdlZCA9IE9iamVjdC5rZXlzKG9yaWdpbmFsVmFsdWUpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoY29udHJvbHMpLmxlbmd0aDtcbiAgY29uc3QgbmV3VmFsdWUgPSBjb250cm9scy5tYXAoKHN0YXRlLCBpKSA9PiB7XG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgb3JpZ2luYWxWYWx1ZVtpXSAhPT0gc3RhdGUudmFsdWU7XG4gICAgcmV0dXJuIHN0YXRlLnZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld1ZhbHVlIDogb3JpZ2luYWxWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm9ybUFycmF5RXJyb3JzPFRWYWx1ZT4oXG4gIGNvbnRyb2xzOiByZWFkb25seSBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+W10sXG4gIG9yaWdpbmFsRXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzLFxuKTogVmFsaWRhdGlvbkVycm9ycyB7XG4gIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gIGNvbnN0IGdyb3VwRXJyb3JzID1cbiAgICBPYmplY3Qua2V5cyhvcmlnaW5hbEVycm9ycylcbiAgICAgIC5maWx0ZXIoa2V5ID0+ICFrZXkuc3RhcnRzV2l0aCgnXycpKVxuICAgICAgLnJlZHVjZSgocmVzLCBrZXkpID0+IE9iamVjdC5hc3NpZ24ocmVzLCB7IFtrZXldOiBvcmlnaW5hbEVycm9yc1trZXldIH0pLCB7fSBhcyBWYWxpZGF0aW9uRXJyb3JzKTtcblxuICBjb25zdCBuZXdFcnJvcnMgPSBjb250cm9scy5yZWR1Y2UoKHJlcywgc3RhdGUsIGkpID0+IHtcbiAgICBjb25zdCBjb250cm9sRXJyb3JzID0gc3RhdGUuZXJyb3JzO1xuICAgIGlmICghaXNFbXB0eShjb250cm9sRXJyb3JzKSkge1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgb3JpZ2luYWxFcnJvcnNbYF8ke2l9YF0gIT09IGNvbnRyb2xFcnJvcnM7XG4gICAgICBPYmplY3QuYXNzaWduKHJlcywgeyBbYF8ke2l9YF06IGNvbnRyb2xFcnJvcnMgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG9yaWdpbmFsRXJyb3JzLmhhc093blByb3BlcnR5KGBfJHtpfWApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH0sIGdyb3VwRXJyb3JzKTtcblxuICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBPYmplY3Qua2V5cyhvcmlnaW5hbEVycm9ycykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhuZXdFcnJvcnMpLmxlbmd0aDtcblxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0Vycm9ycyA6IG9yaWdpbmFsRXJyb3JzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUFycmF5U3RhdGU8VFZhbHVlPihcbiAgaWQ6IHN0cmluZyxcbiAgaW5mZXJyZWRDb250cm9sczogcmVhZG9ubHkgRm9ybVN0YXRlPFRWYWx1ZT5bXSxcbiAgdmFsdWU6IFRWYWx1ZVtdLFxuICBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsXG4gIHBlbmRpbmdWYWxpZGF0aW9uczogcmVhZG9ubHkgc3RyaW5nW10sXG4gIHVzZXJEZWZpbmVkUHJvcGVydGllczogS2V5VmFsdWUsXG4gIGZsYWdzOiB7XG4gICAgd2FzT3JTaG91bGRCZURpcnR5PzogYm9vbGVhbjtcbiAgICB3YXNPclNob3VsZEJlRW5hYmxlZD86IGJvb2xlYW47XG4gICAgd2FzT3JTaG91bGRCZVRvdWNoZWQ/OiBib29sZWFuO1xuICAgIHdhc09yU2hvdWxkQmVTdWJtaXR0ZWQ/OiBib29sZWFuO1xuICB9LFxuKTogRm9ybUFycmF5U3RhdGU8VFZhbHVlPiB7XG4gIGNvbnN0IGNvbnRyb2xzID0gaW5mZXJyZWRDb250cm9scyBhcyByZWFkb25seSBBYnN0cmFjdENvbnRyb2xTdGF0ZTxhbnk+W107XG5cbiAgdmFsdWUgPSBnZXRGb3JtQXJyYXlWYWx1ZTxUVmFsdWU+KGNvbnRyb2xzLCB2YWx1ZSk7XG4gIGVycm9ycyA9IGdldEZvcm1BcnJheUVycm9ycyhjb250cm9scywgZXJyb3JzKTtcbiAgY29uc3QgaXNWYWxpZCA9IGlzRW1wdHkoZXJyb3JzKTtcbiAgY29uc3QgaXNEaXJ0eSA9IGZsYWdzLndhc09yU2hvdWxkQmVEaXJ0eSB8fCBjb250cm9scy5zb21lKHN0YXRlID0+IHN0YXRlLmlzRGlydHkpO1xuICBjb25zdCBpc0VuYWJsZWQgPSBmbGFncy53YXNPclNob3VsZEJlRW5hYmxlZCB8fCBjb250cm9scy5zb21lKHN0YXRlID0+IHN0YXRlLmlzRW5hYmxlZCk7XG4gIGNvbnN0IGlzVG91Y2hlZCA9IGZsYWdzLndhc09yU2hvdWxkQmVUb3VjaGVkIHx8IGNvbnRyb2xzLnNvbWUoc3RhdGUgPT4gc3RhdGUuaXNUb3VjaGVkKTtcbiAgY29uc3QgaXNTdWJtaXR0ZWQgPSBmbGFncy53YXNPclNob3VsZEJlU3VibWl0dGVkIHx8IGNvbnRyb2xzLnNvbWUoc3RhdGUgPT4gc3RhdGUuaXNTdWJtaXR0ZWQpO1xuICBjb25zdCBpc1ZhbGlkYXRpb25QZW5kaW5nID0gcGVuZGluZ1ZhbGlkYXRpb25zLmxlbmd0aCA+IDAgfHwgY29udHJvbHMuc29tZShzdGF0ZSA9PiBzdGF0ZS5pc1ZhbGlkYXRpb25QZW5kaW5nKTtcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICB2YWx1ZSxcbiAgICBlcnJvcnMsXG4gICAgcGVuZGluZ1ZhbGlkYXRpb25zLFxuICAgIGlzVmFsaWRhdGlvblBlbmRpbmcsXG4gICAgaXNWYWxpZCxcbiAgICBpc0ludmFsaWQ6ICFpc1ZhbGlkLFxuICAgIGlzRW5hYmxlZCxcbiAgICBpc0Rpc2FibGVkOiAhaXNFbmFibGVkLFxuICAgIGlzRGlydHksXG4gICAgaXNQcmlzdGluZTogIWlzRGlydHksXG4gICAgaXNUb3VjaGVkLFxuICAgIGlzVW50b3VjaGVkOiAhaXNUb3VjaGVkLFxuICAgIGlzU3VibWl0dGVkLFxuICAgIGlzVW5zdWJtaXR0ZWQ6ICFpc1N1Ym1pdHRlZCxcbiAgICB1c2VyRGVmaW5lZFByb3BlcnRpZXMsXG4gICAgY29udHJvbHM6IGluZmVycmVkQ29udHJvbHMsXG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgZm9ybSBhcnJheSBzdGF0ZSB3aXRoIGFuIElEIGFuZCBhIHZhbHVlLlxuICogRnJvbSB0aGUgdmFsdWUgdGhlIHNoYXBlIG9mIHRoZSBhcnJheSBzdGF0ZSBpcyBpbmZlcnJlZCwgaS5lLlxuICogb2JqZWN0IHZhbHVlcyBhcmUgaW5mZXJyZWQgYXMgZm9ybSBncm91cHMsIGFycmF5IHZhbHVlc1xuICogYXJlIGluZmVycmVkIGFzIGZvcm0gYXJyYXlzLCBhbmQgcHJpbWl0aXZlIHZhbHVlcyBhcmUgaW5mZXJyZWRcbiAqIGFzIGZvcm0gY29udHJvbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+KFxuICBpZDogTmdyeEZvcm1Db250cm9sSWQsXG4gIGluaXRpYWxWYWx1ZTogVFZhbHVlW10sXG4pOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+IHtcbiAgY29uc3QgY29udHJvbHMgPSBpbml0aWFsVmFsdWVcbiAgICAubWFwKCh2YWx1ZSwgaSkgPT4gY3JlYXRlQ2hpbGRTdGF0ZShgJHtpZH0uJHtpfWAsIHZhbHVlKSk7XG5cbiAgcmV0dXJuIGNvbXB1dGVBcnJheVN0YXRlKGlkLCBjb250cm9scywgaW5pdGlhbFZhbHVlLCB7fSwgW10sIHt9LCB7IHdhc09yU2hvdWxkQmVFbmFibGVkOiB0cnVlIH0pO1xufVxuIl19