import { ClearAsyncErrorAction } from '../../actions';
import { isEmpty } from '../../util';
export function clearAsyncErrorReducer(state, action) {
    if (action.type !== ClearAsyncErrorAction.TYPE) {
        return state;
    }
    const name = `$${action.name}`;
    let errors = state.errors;
    if (errors.hasOwnProperty(name)) {
        errors = Object.assign({}, state.errors);
        delete errors[name];
    }
    const pendingValidations = state.pendingValidations.filter(v => v !== action.name);
    const isValid = isEmpty(errors);
    if (errors === state.errors && isValid === state.isValid && pendingValidations.length === state.pendingValidations.length) {
        return state;
    }
    return Object.assign({}, state, { isValid, isInvalid: !isValid, errors,
        pendingValidations, isValidationPending: pendingValidations.length > 0 });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItYXN5bmMtZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWZvcm1zLyIsInNvdXJjZXMiOlsic3JjL2NvbnRyb2wvcmVkdWNlci9jbGVhci1hc3luYy1lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVcscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyQyxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLEtBQStCLEVBQy9CLE1BQXVCO0lBRXZCLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUU7UUFDOUMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRS9CLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFFMUIsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQy9CLE1BQU0scUJBQVEsS0FBSyxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQzdCLE9BQVEsTUFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCO0lBRUQsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFaEMsSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLE1BQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRTtRQUN6SCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQseUJBQ0ssS0FBSyxJQUNSLE9BQU8sRUFDUCxTQUFTLEVBQUUsQ0FBQyxPQUFPLEVBQ25CLE1BQU07UUFDTixrQkFBa0IsRUFDbEIsbUJBQW1CLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsSUFDbEQ7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9ucywgQ2xlYXJBc3luY0Vycm9yQWN0aW9uIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbFN0YXRlLCBGb3JtQ29udHJvbFZhbHVlVHlwZXMgfSBmcm9tICcuLi8uLi9zdGF0ZSc7XG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFzeW5jRXJyb3JSZWR1Y2VyPFRWYWx1ZSBleHRlbmRzIEZvcm1Db250cm9sVmFsdWVUeXBlcz4oXG4gIHN0YXRlOiBGb3JtQ29udHJvbFN0YXRlPFRWYWx1ZT4sXG4gIGFjdGlvbjogQWN0aW9uczxUVmFsdWU+LFxuKTogRm9ybUNvbnRyb2xTdGF0ZTxUVmFsdWU+IHtcbiAgaWYgKGFjdGlvbi50eXBlICE9PSBDbGVhckFzeW5jRXJyb3JBY3Rpb24uVFlQRSkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGNvbnN0IG5hbWUgPSBgJCR7YWN0aW9uLm5hbWV9YDtcblxuICBsZXQgZXJyb3JzID0gc3RhdGUuZXJyb3JzO1xuXG4gIGlmIChlcnJvcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICBlcnJvcnMgPSB7IC4uLnN0YXRlLmVycm9ycyB9O1xuICAgIGRlbGV0ZSAoZXJyb3JzIGFzIGFueSlbbmFtZV07XG4gIH1cblxuICBjb25zdCBwZW5kaW5nVmFsaWRhdGlvbnMgPSBzdGF0ZS5wZW5kaW5nVmFsaWRhdGlvbnMuZmlsdGVyKHYgPT4gdiAhPT0gYWN0aW9uLm5hbWUpO1xuICBjb25zdCBpc1ZhbGlkID0gaXNFbXB0eShlcnJvcnMpO1xuXG4gIGlmIChlcnJvcnMgPT09IHN0YXRlLmVycm9ycyAmJiBpc1ZhbGlkID09PSBzdGF0ZS5pc1ZhbGlkICYmIHBlbmRpbmdWYWxpZGF0aW9ucy5sZW5ndGggPT09IHN0YXRlLnBlbmRpbmdWYWxpZGF0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIGlzVmFsaWQsXG4gICAgaXNJbnZhbGlkOiAhaXNWYWxpZCxcbiAgICBlcnJvcnMsXG4gICAgcGVuZGluZ1ZhbGlkYXRpb25zLFxuICAgIGlzVmFsaWRhdGlvblBlbmRpbmc6IHBlbmRpbmdWYWxpZGF0aW9ucy5sZW5ndGggPiAwLFxuICB9O1xufVxuIl19