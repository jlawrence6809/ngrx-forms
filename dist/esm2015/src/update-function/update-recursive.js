import { isArrayState, isFormState, isGroupState, } from '../state';
import { updateArray } from './update-array';
import { updateGroup } from './update-group';
import { ensureState } from './util';
function updateRecursiveSingle(parent, updateFn) {
    return (state) => {
        if (isGroupState(state)) {
            const updateFunctions = Object.keys(state.controls).reduce((agg, key) => Object.assign(agg, {
                [key]: (s, p) => updateRecursiveSingle(p, updateFn)(s),
            }), {});
            state = updateGroup(updateFunctions)(state);
            return updateFn(state, parent);
        }
        if (isArrayState(state)) {
            state = updateArray((s, p) => updateRecursiveSingle(p, updateFn)(s))(state);
            return updateFn(state, parent);
        }
        return updateFn(state, parent);
    };
}
export function updateRecursive(stateOrFunctionOrFunctionArray, updateFnOrUpdateFnArr, ...rest) {
    if (isFormState(stateOrFunctionOrFunctionArray)) {
        const updateFnArr = Array.isArray(updateFnOrUpdateFnArr) ? updateFnOrUpdateFnArr : [updateFnOrUpdateFnArr];
        return updateFnArr.concat(...rest)
            .reduce((s, updateFn) => updateRecursiveSingle(stateOrFunctionOrFunctionArray, updateFn)(s), stateOrFunctionOrFunctionArray);
    }
    let updateFnArr = Array.isArray(stateOrFunctionOrFunctionArray) ? stateOrFunctionOrFunctionArray : [stateOrFunctionOrFunctionArray];
    updateFnArr = updateFnOrUpdateFnArr === undefined ? updateFnArr : updateFnArr.concat(updateFnOrUpdateFnArr);
    return (s) => updateRecursive(ensureState(s), updateFnArr.concat(rest));
}
//# sourceMappingURL=data:application/json;base64,