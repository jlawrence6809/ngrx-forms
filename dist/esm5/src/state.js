import * as tslib_1 from "tslib";
import { isBoxed } from './boxing';
import { deepEquals, isEmpty } from './util';
/**
 * This function determines if a value is a form state.
 */
export function isFormState(state) {
    return !!state && state.hasOwnProperty('id') && state.hasOwnProperty('value') && state.hasOwnProperty('errors');
}
/**
 * This function determines if a value is an array state.
 */
export function isArrayState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && Array.isArray(state.controls);
}
/**
 * This function determines if a value is a group state.
 */
export function isGroupState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && !Array.isArray(state.controls) && typeof state.controls !== 'function';
}
export function createChildState(id, childValue) {
    if (isBoxed(childValue)) {
        return createFormControlState(id, childValue);
    }
    if (childValue !== null && Array.isArray(childValue)) {
        return createFormArrayState(id, childValue);
    }
    if (childValue !== null && typeof childValue === 'object') {
        return createFormGroupState(id, childValue);
    }
    return createFormControlState(id, childValue);
}
export function verifyFormControlValueIsValid(value) {
    if (value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value) >= 0) {
        return value;
    }
    if (!isBoxed(value)) {
        var errorMsg = 'Form control states only support undefined, null, string, number, and boolean values as well as boxed values';
        throw new Error(errorMsg + "; got " + JSON.stringify(value) + " of type " + typeof value); // `;
    }
    if (value.value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value.value) >= 0) {
        return value;
    }
    var serialized = JSON.stringify(value);
    var deserialized = JSON.parse(serialized);
    if (deepEquals(value, deserialized)) {
        return value;
    }
    throw new Error("A form control value must be serializable (i.e. value === JSON.parse(JSON.stringify(value))), got: " + JSON.stringify(value));
}
/**
 * This function creates a form control state with an ID and a value.
 */
export function createFormControlState(id, value) {
    return {
        id: id,
        value: verifyFormControlValueIsValid(value),
        errors: {},
        pendingValidations: [],
        isValidationPending: false,
        isValid: true,
        isInvalid: false,
        isEnabled: true,
        isDisabled: false,
        isDirty: false,
        isPristine: true,
        isTouched: false,
        isUntouched: true,
        isSubmitted: false,
        isUnsubmitted: true,
        isFocused: false,
        isUnfocused: true,
        userDefinedProperties: {},
    };
}
export function getFormGroupValue(controls, originalValue) {
    var hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    var newValue = Object.keys(controls).reduce(function (res, key) {
        hasChanged = hasChanged || originalValue[key] !== controls[key].value;
        res[key] = controls[key].value;
        return res;
    }, {});
    return hasChanged ? newValue : originalValue;
}
export function getFormGroupErrors(controls, originalErrors) {
    var hasChanged = false;
    var groupErrors = Object.keys(originalErrors)
        .filter(function (key) { return !key.startsWith('_'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = originalErrors[key], _a));
    }, {});
    var newErrors = Object.keys(controls).reduce(function (res, key) {
        var _a;
        var controlErrors = controls[key].errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors["_" + key] !== controlErrors;
            Object.assign(res, (_a = {}, _a["_" + key] = controls[key].errors, _a));
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty("_" + key);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeGroupState(id, controls, value, errors, pendingValidations, userDefinedProperties, flags) {
    value = getFormGroupValue(controls, value);
    errors = getFormGroupErrors(controls, errors);
    var isValid = isEmpty(errors);
    var isDirty = flags.wasOrShouldBeDirty || Object.keys(controls).some(function (key) { return controls[key].isDirty; });
    var isEnabled = flags.wasOrShouldBeEnabled || Object.keys(controls).some(function (key) { return controls[key].isEnabled; });
    var isTouched = flags.wasOrShouldBeTouched || Object.keys(controls).some(function (key) { return controls[key].isTouched; });
    var isSubmitted = flags.wasOrShouldBeSubmitted || Object.keys(controls).some(function (key) { return controls[key].isSubmitted; });
    var isValidationPending = pendingValidations.length > 0 || Object.keys(controls).some(function (key) { return controls[key].isValidationPending; });
    return {
        id: id,
        value: value,
        errors: errors,
        pendingValidations: pendingValidations,
        isValidationPending: isValidationPending,
        isValid: isValid,
        isInvalid: !isValid,
        isEnabled: isEnabled,
        isDisabled: !isEnabled,
        isDirty: isDirty,
        isPristine: !isDirty,
        isTouched: isTouched,
        isUntouched: !isTouched,
        isSubmitted: isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties: userDefinedProperties,
        controls: controls,
    };
}
/**
 * This function creates a form group state with an ID and a value.
 * From the value the shape of the group state is inferred, i.e.
 * object properties are inferred as form groups, array properties
 * are inferred as form arrays, and primitive properties are inferred
 * as form controls.
 */
export function createFormGroupState(id, initialValue) {
    var controls = Object.keys(initialValue)
        .map(function (key) { return [key, createChildState(id + "." + key, initialValue[key])]; })
        .reduce(function (res, _a) {
        var _b;
        var _c = tslib_1.__read(_a, 2), controlId = _c[0], state = _c[1];
        return Object.assign(res, (_b = {}, _b[controlId] = state, _b));
    }, {});
    return computeGroupState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
function getFormArrayValue(controls, originalValue) {
    var hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    var newValue = controls.map(function (state, i) {
        hasChanged = hasChanged || originalValue[i] !== state.value;
        return state.value;
    });
    return hasChanged ? newValue : originalValue;
}
function getFormArrayErrors(controls, originalErrors) {
    var hasChanged = false;
    var groupErrors = Object.keys(originalErrors)
        .filter(function (key) { return !key.startsWith('_'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = originalErrors[key], _a));
    }, {});
    var newErrors = controls.reduce(function (res, state, i) {
        var _a;
        var controlErrors = state.errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors["_" + i] !== controlErrors;
            Object.assign(res, (_a = {}, _a["_" + i] = controlErrors, _a));
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty("_" + i);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeArrayState(id, inferredControls, value, errors, pendingValidations, userDefinedProperties, flags) {
    var controls = inferredControls;
    value = getFormArrayValue(controls, value);
    errors = getFormArrayErrors(controls, errors);
    var isValid = isEmpty(errors);
    var isDirty = flags.wasOrShouldBeDirty || controls.some(function (state) { return state.isDirty; });
    var isEnabled = flags.wasOrShouldBeEnabled || controls.some(function (state) { return state.isEnabled; });
    var isTouched = flags.wasOrShouldBeTouched || controls.some(function (state) { return state.isTouched; });
    var isSubmitted = flags.wasOrShouldBeSubmitted || controls.some(function (state) { return state.isSubmitted; });
    var isValidationPending = pendingValidations.length > 0 || controls.some(function (state) { return state.isValidationPending; });
    return {
        id: id,
        value: value,
        errors: errors,
        pendingValidations: pendingValidations,
        isValidationPending: isValidationPending,
        isValid: isValid,
        isInvalid: !isValid,
        isEnabled: isEnabled,
        isDisabled: !isEnabled,
        isDirty: isDirty,
        isPristine: !isDirty,
        isTouched: isTouched,
        isUntouched: !isTouched,
        isSubmitted: isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties: userDefinedProperties,
        controls: inferredControls,
    };
}
/**
 * This function creates a form array state with an ID and a value.
 * From the value the shape of the array state is inferred, i.e.
 * object values are inferred as form groups, array values
 * are inferred as form arrays, and primitive values are inferred
 * as form controls.
 */
export function createFormArrayState(id, initialValue) {
    var controls = initialValue
        .map(function (value, i) { return createChildState(id + "." + i, value); });
    return computeArrayState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
//# sourceMappingURL=data:application/json;base64,