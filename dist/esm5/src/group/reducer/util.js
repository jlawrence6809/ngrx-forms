import * as tslib_1 from "tslib";
import { formStateReducer } from '../../reducer';
import { computeGroupState } from '../../state';
export function dispatchActionPerChild(controls, actionCreator) {
    var hasChanged = false;
    var newControls = Object.keys(controls)
        .reduce(function (c, key) {
        var _a;
        Object.assign(c, (_a = {}, _a[key] = formStateReducer(controls[key], actionCreator(controls[key].id)), _a));
        hasChanged = hasChanged || c[key] !== controls[key];
        return c;
    }, {});
    return hasChanged ? newControls : controls;
}
function callChildReducers(controls, action) {
    var hasChanged = false;
    var newControls = Object.keys(controls)
        .map(function (key) { return [key, formStateReducer(controls[key], action)]; })
        .reduce(function (res, _a) {
        var _b;
        var _c = tslib_1.__read(_a, 2), key = _c[0], state = _c[1];
        hasChanged = hasChanged || state !== controls[key];
        return Object.assign(res, (_b = {}, _b[key] = state, _b));
    }, {});
    return hasChanged ? newControls : controls;
}
export function childReducer(state, action) {
    var controls = callChildReducers(state.controls, action);
    if (state.controls === controls) {
        return state;
    }
    return computeGroupState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: state.isDirty,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvZ3JvdXAvcmVkdWNlci91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUEwRCxNQUFNLGFBQWEsQ0FBQztBQUV4RyxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFFBQW1DLEVBQ25DLGFBQXFEO0lBRXJELElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0QyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsR0FBRzs7UUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBSSxHQUFDLEdBQUcsSUFBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFHLENBQUM7UUFDOUYsVUFBVSxHQUFHLFVBQVUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxFQUFFLEVBQStCLENBQUMsQ0FBQztJQUN0QyxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQ3hCLFFBQW1DLEVBQ25DLE1BQXVCO0lBRXZCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0QyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQTZCLEVBQTFFLENBQTBFLENBQUM7U0FDdEYsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLEVBQVk7O1lBQVosMEJBQVksRUFBWCxXQUFHLEVBQUUsYUFBSztRQUN2QixVQUFVLEdBQUcsVUFBVSxJQUFJLEtBQUssS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBSSxHQUFDLEdBQUcsSUFBRyxLQUFLLE1BQUcsQ0FBQztJQUM5QyxDQUFDLEVBQUUsRUFBK0IsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBMEIsS0FBNkIsRUFBRSxNQUF1QjtJQUMxRyxJQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTNELElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDL0IsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE9BQU8saUJBQWlCLENBQ3RCLEtBQUssQ0FBQyxFQUFFLEVBQ1IsUUFBUSxFQUNSLEtBQUssQ0FBQyxLQUFLLEVBQ1gsS0FBSyxDQUFDLE1BQU0sRUFDWixLQUFLLENBQUMsa0JBQWtCLEVBQ3hCLEtBQUssQ0FBQyxxQkFBcUIsRUFDM0I7UUFDRSxrQkFBa0IsRUFBRSxLQUFLLENBQUMsT0FBTztRQUNqQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsU0FBUztRQUNyQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsU0FBUztRQUNyQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsV0FBVztLQUMxQyxDQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xuaW1wb3J0IHsgZm9ybVN0YXRlUmVkdWNlciB9IGZyb20gJy4uLy4uL3JlZHVjZXInO1xuaW1wb3J0IHsgY29tcHV0ZUdyb3VwU3RhdGUsIEZvcm1Hcm91cENvbnRyb2xzLCBGb3JtR3JvdXBTdGF0ZSwgRm9ybVN0YXRlLCBLZXlWYWx1ZSB9IGZyb20gJy4uLy4uL3N0YXRlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoQWN0aW9uUGVyQ2hpbGQ8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxuICBjb250cm9sczogRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPixcbiAgYWN0aW9uQ3JlYXRvcjogKGNvbnRyb2xJZDogc3RyaW5nKSA9PiBBY3Rpb25zPFRWYWx1ZT4sXG4pIHtcbiAgbGV0IGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgY29uc3QgbmV3Q29udHJvbHMgPSBPYmplY3Qua2V5cyhjb250cm9scylcbiAgICAucmVkdWNlKChjLCBrZXkpID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24oYywgeyBba2V5XTogZm9ybVN0YXRlUmVkdWNlcihjb250cm9sc1trZXldLCBhY3Rpb25DcmVhdG9yKGNvbnRyb2xzW2tleV0uaWQpKSB9KTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGNba2V5XSAhPT0gY29udHJvbHNba2V5XTtcbiAgICAgIHJldHVybiBjO1xuICAgIH0sIHt9IGFzIEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4pO1xuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0NvbnRyb2xzIDogY29udHJvbHM7XG59XG5cbmZ1bmN0aW9uIGNhbGxDaGlsZFJlZHVjZXJzPFRWYWx1ZSBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYW55IH0+KFxuICBjb250cm9sczogRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPixcbiAgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZT4sXG4pOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+IHtcbiAgbGV0IGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgY29uc3QgbmV3Q29udHJvbHMgPSBPYmplY3Qua2V5cyhjb250cm9scylcbiAgICAubWFwKGtleSA9PiBba2V5LCBmb3JtU3RhdGVSZWR1Y2VyKGNvbnRyb2xzW2tleV0sIGFjdGlvbildIGFzIFtzdHJpbmcsIEZvcm1TdGF0ZTxhbnk+XSlcbiAgICAucmVkdWNlKChyZXMsIFtrZXksIHN0YXRlXSkgPT4ge1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgc3RhdGUgIT09IGNvbnRyb2xzW2tleV07XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihyZXMsIHsgW2tleV06IHN0YXRlIH0pO1xuICAgIH0sIHt9IGFzIEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4pO1xuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0NvbnRyb2xzIDogY29udHJvbHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZFJlZHVjZXI8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KHN0YXRlOiBGb3JtR3JvdXBTdGF0ZTxUVmFsdWU+LCBhY3Rpb246IEFjdGlvbnM8VFZhbHVlPikge1xuICBjb25zdCBjb250cm9scyA9IGNhbGxDaGlsZFJlZHVjZXJzKHN0YXRlLmNvbnRyb2xzLCBhY3Rpb24pO1xuXG4gIGlmIChzdGF0ZS5jb250cm9scyA9PT0gY29udHJvbHMpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICByZXR1cm4gY29tcHV0ZUdyb3VwU3RhdGUoXG4gICAgc3RhdGUuaWQsXG4gICAgY29udHJvbHMsXG4gICAgc3RhdGUudmFsdWUsXG4gICAgc3RhdGUuZXJyb3JzLFxuICAgIHN0YXRlLnBlbmRpbmdWYWxpZGF0aW9ucyxcbiAgICBzdGF0ZS51c2VyRGVmaW5lZFByb3BlcnRpZXMsXG4gICAge1xuICAgICAgd2FzT3JTaG91bGRCZURpcnR5OiBzdGF0ZS5pc0RpcnR5LFxuICAgICAgd2FzT3JTaG91bGRCZUVuYWJsZWQ6IHN0YXRlLmlzRW5hYmxlZCxcbiAgICAgIHdhc09yU2hvdWxkQmVUb3VjaGVkOiBzdGF0ZS5pc1RvdWNoZWQsXG4gICAgICB3YXNPclNob3VsZEJlU3VibWl0dGVkOiBzdGF0ZS5pc1N1Ym1pdHRlZCxcbiAgICB9LFxuICApO1xufVxuIl19