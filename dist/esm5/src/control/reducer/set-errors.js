import * as tslib_1 from "tslib";
import { SetErrorsAction } from '../../actions';
import { deepEquals, isEmpty } from '../../util';
export function setErrorsReducer(state, action) {
    if (action.type !== SetErrorsAction.TYPE) {
        return state;
    }
    if (state.isDisabled) {
        return state;
    }
    if (state.errors === action.errors) {
        return state;
    }
    if (deepEquals(state.errors, action.errors)) {
        return state;
    }
    if (!action.errors || typeof action.errors !== 'object' || Array.isArray(action.errors)) {
        throw new Error("Control errors must be an object; got " + action.errors); // `;
    }
    if (Object.keys(action.errors).some(function (key) { return key.startsWith('$'); })) {
        throw new Error("Control errors must not use $ as a prefix; got " + JSON.stringify(action.errors)); // `;
    }
    var asyncErrors = Object.keys(state.errors)
        .filter(function (key) { return key.startsWith('$'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = state.errors[key], _a));
    }, {});
    var newErrors = isEmpty(asyncErrors) ? action.errors : Object.assign(asyncErrors, action.errors);
    var isValid = isEmpty(newErrors);
    return tslib_1.__assign({}, state, { isValid: isValid, isInvalid: !isValid, errors: newErrors });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvY29udHJvbC9yZWR1Y2VyL3NldC1lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBVyxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixLQUErQixFQUMvQixNQUF1QjtJQUV2QixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1FBQ3BCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNsQyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDM0MsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQVEsTUFBTSxDQUFDLE1BQWMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDaEcsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBeUMsTUFBTSxDQUFDLE1BQVEsQ0FBQyxDQUFDLENBQUMsS0FBSztLQUNqRjtJQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxFQUFFO1FBQy9ELE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQWtELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLO0tBQzFHO0lBRUQsSUFBTSxXQUFXLEdBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1NBQ3RCLE1BQU0sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQW5CLENBQW1CLENBQUM7U0FDbEMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUc7O1FBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBSSxHQUFDLEdBQUcsSUFBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFHO0lBQWhELENBQWdELEVBQUUsRUFBc0IsQ0FBQyxDQUFDO0lBRXBHLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25HLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVuQyw0QkFDSyxLQUFLLElBQ1IsT0FBTyxTQUFBLEVBQ1AsU0FBUyxFQUFFLENBQUMsT0FBTyxFQUNuQixNQUFNLEVBQUUsU0FBUyxJQUNqQjtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25zLCBTZXRFcnJvcnNBY3Rpb24gfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcbmltcG9ydCB7IEZvcm1Db250cm9sU3RhdGUsIEZvcm1Db250cm9sVmFsdWVUeXBlcywgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJy4uLy4uL3N0YXRlJztcbmltcG9ydCB7IGRlZXBFcXVhbHMsIGlzRW1wdHkgfSBmcm9tICcuLi8uLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yc1JlZHVjZXI8VFZhbHVlIGV4dGVuZHMgRm9ybUNvbnRyb2xWYWx1ZVR5cGVzPihcbiAgc3RhdGU6IEZvcm1Db250cm9sU3RhdGU8VFZhbHVlPixcbiAgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZT4sXG4pOiBGb3JtQ29udHJvbFN0YXRlPFRWYWx1ZT4ge1xuICBpZiAoYWN0aW9uLnR5cGUgIT09IFNldEVycm9yc0FjdGlvbi5UWVBFKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgaWYgKHN0YXRlLmlzRGlzYWJsZWQpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBpZiAoc3RhdGUuZXJyb3JzID09PSBhY3Rpb24uZXJyb3JzKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgaWYgKGRlZXBFcXVhbHMoc3RhdGUuZXJyb3JzLCBhY3Rpb24uZXJyb3JzKSkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGlmICghYWN0aW9uLmVycm9ycyB8fCB0eXBlb2YgKGFjdGlvbi5lcnJvcnMgYXMgYW55KSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShhY3Rpb24uZXJyb3JzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ29udHJvbCBlcnJvcnMgbXVzdCBiZSBhbiBvYmplY3Q7IGdvdCAke2FjdGlvbi5lcnJvcnN9YCk7IC8vIGA7XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoYWN0aW9uLmVycm9ycykuc29tZShrZXkgPT4ga2V5LnN0YXJ0c1dpdGgoJyQnKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnRyb2wgZXJyb3JzIG11c3Qgbm90IHVzZSAkIGFzIGEgcHJlZml4OyBnb3QgJHtKU09OLnN0cmluZ2lmeShhY3Rpb24uZXJyb3JzKX1gKTsgLy8gYDtcbiAgfVxuXG4gIGNvbnN0IGFzeW5jRXJyb3JzID1cbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpXG4gICAgICAuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnJCcpKVxuICAgICAgLnJlZHVjZSgocmVzLCBrZXkpID0+IE9iamVjdC5hc3NpZ24ocmVzLCB7IFtrZXldOiBzdGF0ZS5lcnJvcnNba2V5XSB9KSwge30gYXMgVmFsaWRhdGlvbkVycm9ycyk7XG5cbiAgY29uc3QgbmV3RXJyb3JzID0gaXNFbXB0eShhc3luY0Vycm9ycykgPyBhY3Rpb24uZXJyb3JzIDogT2JqZWN0LmFzc2lnbihhc3luY0Vycm9ycywgYWN0aW9uLmVycm9ycyk7XG4gIGNvbnN0IGlzVmFsaWQgPSBpc0VtcHR5KG5ld0Vycm9ycyk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICBpc1ZhbGlkLFxuICAgIGlzSW52YWxpZDogIWlzVmFsaWQsXG4gICAgZXJyb3JzOiBuZXdFcnJvcnMsXG4gIH07XG59XG4iXX0=