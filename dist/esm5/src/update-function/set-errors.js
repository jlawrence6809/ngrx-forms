import * as tslib_1 from "tslib";
import { SetErrorsAction } from '../actions';
import { formStateReducer } from '../reducer';
import { isFormState } from '../state';
import { ensureState } from './util';
export function setErrors(errorsOrErrorsArrayOrState, errorsOrErrorsArray) {
    var rest = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
    }
    if (isFormState(errorsOrErrorsArrayOrState)) {
        var errorsArray_1 = Array.isArray(errorsOrErrorsArray) ? errorsOrErrorsArray : [errorsOrErrorsArray];
        var errors = errorsArray_1.concat.apply(errorsArray_1, tslib_1.__spread(rest)).reduce(function (agg, err) { return Object.assign(agg, err); }, {});
        return formStateReducer(errorsOrErrorsArrayOrState, new SetErrorsAction(errorsOrErrorsArrayOrState.id, errors));
    }
    var errorsArray = Array.isArray(errorsOrErrorsArrayOrState) ? errorsOrErrorsArrayOrState : [errorsOrErrorsArrayOrState];
    errorsArray = errorsOrErrorsArray === undefined ? errorsArray : errorsArray.concat(errorsOrErrorsArray);
    return function (s) { return setErrors(ensureState(s), errorsArray.concat(rest)); };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvdXBkYXRlLWZ1bmN0aW9uL3NldC1lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzlDLE9BQU8sRUFBbUMsV0FBVyxFQUFvQixNQUFNLFVBQVUsQ0FBQztBQUMxRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBaUNyQyxNQUFNLFVBQVUsU0FBUyxDQUN2QiwwQkFBcUYsRUFDckYsbUJBQTJEO0lBQzNELGNBQTJCO1NBQTNCLFVBQTJCLEVBQTNCLHFCQUEyQixFQUEzQixJQUEyQjtRQUEzQiw2QkFBMkI7O0lBRTNCLElBQUksV0FBVyxDQUFTLDBCQUEwQixDQUFDLEVBQUU7UUFDbkQsSUFBTSxhQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBb0IsQ0FBQyxDQUFDO1FBQ3RHLElBQU0sTUFBTSxHQUFHLGFBQVcsQ0FBQyxNQUFNLE9BQWxCLGFBQVcsbUJBQVcsSUFBSSxHQUFFLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxHQUFHLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBdkIsQ0FBdUIsRUFBRSxFQUFzQixDQUFDLENBQUM7UUFFakgsT0FBTyxnQkFBZ0IsQ0FBQywwQkFBMEIsRUFBRSxJQUFJLGVBQWUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNqSDtJQUVELElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUN4SCxXQUFXLEdBQUcsbUJBQW1CLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN4RyxPQUFPLFVBQUMsQ0FBK0IsSUFBSyxPQUFBLFNBQVMsQ0FBUyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUEzRCxDQUEyRCxDQUFDO0FBQzFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXRFcnJvcnNBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zJztcbmltcG9ydCB7IGZvcm1TdGF0ZVJlZHVjZXIgfSBmcm9tICcuLi9yZWR1Y2VyJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbFN0YXRlLCBGb3JtU3RhdGUsIGlzRm9ybVN0YXRlLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnLi4vc3RhdGUnO1xuaW1wb3J0IHsgZW5zdXJlU3RhdGUgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIGEgZm9ybSBzdGF0ZSBhbmQgYSBudW1iZXIgb2YgZXJyb3Igb2JqZWN0cyBhbmQgc2V0cyB0aGVcbiAqIGVycm9ycyBvZiB0aGUgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnM8VFZhbHVlPihcbiAgc3RhdGU6IEFic3RyYWN0Q29udHJvbFN0YXRlPFRWYWx1ZT4sXG4gIGVycm9yczogVmFsaWRhdGlvbkVycm9ycyxcbiAgLi4ucmVzdDogVmFsaWRhdGlvbkVycm9yc1tdXG4pOiBGb3JtU3RhdGU8VFZhbHVlPjtcblxuLyoqXG4gKiBUaGlzIHVwZGF0ZSBmdW5jdGlvbiB0YWtlcyBhIGZvcm0gc3RhdGUgYW5kIGFuIGFycmF5IG9mIGVycm9yIG9iamVjdHMgYW5kIHNldHMgdGhlXG4gKiBlcnJvcnMgb2YgdGhlIHN0YXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JzPFRWYWx1ZT4oXG4gIHN0YXRlOiBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+LFxuICBlcnJvcnNBcnJheTogVmFsaWRhdGlvbkVycm9yc1tdLFxuKTogRm9ybVN0YXRlPFRWYWx1ZT47XG5cbi8qKlxuICogVGhpcyB1cGRhdGUgZnVuY3Rpb24gdGFrZXMgYSBudW1iZXIgb2YgZXJyb3Igb2JqZWN0cyBhbmQgcmV0dXJucyBhIHByb2plY3Rpb25cbiAqIGZ1bmN0aW9uIHRoYXQgc2V0cyB0aGUgZXJyb3JzIG9mIGEgZm9ybSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9ycyhlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsIC4uLnJlc3Q6IFZhbGlkYXRpb25FcnJvcnNbXSk6IDxUVmFsdWU+KHN0YXRlOiBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+KSA9PiBGb3JtU3RhdGU8VFZhbHVlPjtcblxuLyoqXG4gKiBUaGlzIHVwZGF0ZSBmdW5jdGlvbiB0YWtlcyBhbiBhcnJheSBvZiBlcnJvciBvYmplY3RzIGFuZCByZXR1cm5zIGEgcHJvamVjdGlvblxuICogZnVuY3Rpb24gdGhhdCBzZXRzIHRoZSBlcnJvcnMgb2YgYSBmb3JtIHN0YXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JzKGVycm9yc0FycmF5OiBWYWxpZGF0aW9uRXJyb3JzW10pOiA8VFZhbHVlPihzdGF0ZTogQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPikgPT4gRm9ybVN0YXRlPFRWYWx1ZT47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnM8VFZhbHVlPihcbiAgZXJyb3JzT3JFcnJvcnNBcnJheU9yU3RhdGU6IFZhbGlkYXRpb25FcnJvcnMgfCBWYWxpZGF0aW9uRXJyb3JzW10gfCBGb3JtU3RhdGU8VFZhbHVlPixcbiAgZXJyb3JzT3JFcnJvcnNBcnJheT86IFZhbGlkYXRpb25FcnJvcnMgfCBWYWxpZGF0aW9uRXJyb3JzW10sXG4gIC4uLnJlc3Q6IFZhbGlkYXRpb25FcnJvcnNbXVxuKSB7XG4gIGlmIChpc0Zvcm1TdGF0ZTxUVmFsdWU+KGVycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlKSkge1xuICAgIGNvbnN0IGVycm9yc0FycmF5ID0gQXJyYXkuaXNBcnJheShlcnJvcnNPckVycm9yc0FycmF5KSA/IGVycm9yc09yRXJyb3JzQXJyYXkgOiBbZXJyb3JzT3JFcnJvcnNBcnJheSFdO1xuICAgIGNvbnN0IGVycm9ycyA9IGVycm9yc0FycmF5LmNvbmNhdCguLi5yZXN0KS5yZWR1Y2UoKGFnZywgZXJyKSA9PiBPYmplY3QuYXNzaWduKGFnZywgZXJyKSwge30gYXMgVmFsaWRhdGlvbkVycm9ycyk7XG5cbiAgICByZXR1cm4gZm9ybVN0YXRlUmVkdWNlcihlcnJvcnNPckVycm9yc0FycmF5T3JTdGF0ZSwgbmV3IFNldEVycm9yc0FjdGlvbihlcnJvcnNPckVycm9yc0FycmF5T3JTdGF0ZS5pZCwgZXJyb3JzKSk7XG4gIH1cblxuICBsZXQgZXJyb3JzQXJyYXkgPSBBcnJheS5pc0FycmF5KGVycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlKSA/IGVycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlIDogW2Vycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlXTtcbiAgZXJyb3JzQXJyYXkgPSBlcnJvcnNPckVycm9yc0FycmF5ID09PSB1bmRlZmluZWQgPyBlcnJvcnNBcnJheSA6IGVycm9yc0FycmF5LmNvbmNhdChlcnJvcnNPckVycm9yc0FycmF5KTtcbiAgcmV0dXJuIChzOiBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+KSA9PiBzZXRFcnJvcnM8VFZhbHVlPihlbnN1cmVTdGF0ZShzKSwgZXJyb3JzQXJyYXkuY29uY2F0KHJlc3QpKTtcbn1cbiJdfQ==