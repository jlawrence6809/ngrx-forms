import * as tslib_1 from "tslib";
import { isArrayState, isFormState, isGroupState, } from '../state';
import { updateArray } from './update-array';
import { updateGroup } from './update-group';
import { ensureState } from './util';
function updateRecursiveSingle(parent, updateFn) {
    return function (state) {
        if (isGroupState(state)) {
            var updateFunctions = Object.keys(state.controls).reduce(function (agg, key) {
                var _a;
                return Object.assign(agg, (_a = {},
                    _a[key] = function (s, p) { return updateRecursiveSingle(p, updateFn)(s); },
                    _a));
            }, {});
            state = updateGroup(updateFunctions)(state);
            return updateFn(state, parent);
        }
        if (isArrayState(state)) {
            state = updateArray(function (s, p) { return updateRecursiveSingle(p, updateFn)(s); })(state);
            return updateFn(state, parent);
        }
        return updateFn(state, parent);
    };
}
export function updateRecursive(stateOrFunctionOrFunctionArray, updateFnOrUpdateFnArr) {
    var rest = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
    }
    if (isFormState(stateOrFunctionOrFunctionArray)) {
        var updateFnArr_1 = Array.isArray(updateFnOrUpdateFnArr) ? updateFnOrUpdateFnArr : [updateFnOrUpdateFnArr];
        return updateFnArr_1.concat.apply(updateFnArr_1, tslib_1.__spread(rest)).reduce(function (s, updateFn) { return updateRecursiveSingle(stateOrFunctionOrFunctionArray, updateFn)(s); }, stateOrFunctionOrFunctionArray);
    }
    var updateFnArr = Array.isArray(stateOrFunctionOrFunctionArray) ? stateOrFunctionOrFunctionArray : [stateOrFunctionOrFunctionArray];
    updateFnArr = updateFnOrUpdateFnArr === undefined ? updateFnArr : updateFnArr.concat(updateFnOrUpdateFnArr);
    return function (s) { return updateRecursive(ensureState(s), updateFnArr.concat(rest)); };
}
//# sourceMappingURL=data:application/json;base64,