import * as tslib_1 from "tslib";
import { SetErrorsAction } from '../actions';
import { formStateReducer } from '../reducer';
import { isFormState } from '../state';
import { ensureState } from './util';
export function validate(stateOrFunctionOrFunctionArray, functionOrFunctionArr) {
    var rest = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
    }
    if (isFormState(stateOrFunctionOrFunctionArray)) {
        var functionArr = Array.isArray(functionOrFunctionArr) ? functionOrFunctionArr : [functionOrFunctionArr];
        var errors = functionArr.concat.apply(functionArr, tslib_1.__spread(rest)).reduce(function (agg, validationFn) { return Object.assign(agg, validationFn(stateOrFunctionOrFunctionArray.value)); }, {});
        return formStateReducer(stateOrFunctionOrFunctionArray, new SetErrorsAction(stateOrFunctionOrFunctionArray.id, errors));
    }
    var updateFnArr = Array.isArray(stateOrFunctionOrFunctionArray) ? stateOrFunctionOrFunctionArray : [stateOrFunctionOrFunctionArray];
    updateFnArr = functionOrFunctionArr === undefined ? updateFnArr : updateFnArr.concat(functionOrFunctionArr);
    return function (s) { return validate(ensureState(s), updateFnArr.concat(rest)); };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWZvcm1zLyIsInNvdXJjZXMiOlsic3JjL3VwZGF0ZS1mdW5jdGlvbi92YWxpZGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDOUMsT0FBTyxFQUFtQyxXQUFXLEVBQW9CLE1BQU0sVUFBVSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUE0Q3JDLE1BQU0sVUFBVSxRQUFRLENBQ3RCLDhCQUFpRyxFQUNqRyxxQkFBcUU7SUFDckUsY0FBK0I7U0FBL0IsVUFBK0IsRUFBL0IscUJBQStCLEVBQS9CLElBQStCO1FBQS9CLDZCQUErQjs7SUFFL0IsSUFBSSxXQUFXLENBQVMsOEJBQThCLENBQUMsRUFBRTtRQUN2RCxJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFzQixDQUFDLENBQUM7UUFDNUcsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sT0FBbEIsV0FBVyxtQkFBVyxJQUFJLEdBQ3RDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxZQUFZLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBdEUsQ0FBc0UsRUFBRSxFQUFzQixDQUFDLENBQUM7UUFDakksT0FBTyxnQkFBZ0IsQ0FBUyw4QkFBOEIsRUFBRSxJQUFJLGVBQWUsQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNqSTtJQUVELElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUNwSSxXQUFXLEdBQUcscUJBQXFCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM1RyxPQUFPLFVBQUMsQ0FBK0IsSUFBSyxPQUFBLFFBQVEsQ0FBUyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUExRCxDQUEwRCxDQUFDO0FBQ3pHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXRFcnJvcnNBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zJztcbmltcG9ydCB7IGZvcm1TdGF0ZVJlZHVjZXIgfSBmcm9tICcuLi9yZWR1Y2VyJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbFN0YXRlLCBGb3JtU3RhdGUsIGlzRm9ybVN0YXRlLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnLi4vc3RhdGUnO1xuaW1wb3J0IHsgZW5zdXJlU3RhdGUgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBWYWxpZGF0aW9uRm48VFZhbHVlPiA9ICh2YWx1ZTogVFZhbHVlKSA9PiBWYWxpZGF0aW9uRXJyb3JzO1xuXG4vKipcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIG9uZSBvciBtb3JlIHZhbGlkYXRpb24gZnVuY3Rpb25zIGFuZCBhIGZvcm1cbiAqIHN0YXRlIGFuZCBzZXRzIHRoZSBlcnJvcnMgb2YgdGhlIHN0YXRlIHRvIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlXG4gKiBnaXZlbiB2YWxpZGF0aW9uIGZ1bmN0aW9uKHMpIHRvIHRoZSBzdGF0ZSdzIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGU8VFZhbHVlPihcbiAgc3RhdGU6IEFic3RyYWN0Q29udHJvbFN0YXRlPFRWYWx1ZT4sXG4gIGZuOiBWYWxpZGF0aW9uRm48VFZhbHVlPixcbiAgLi4ucmVzdDogVmFsaWRhdGlvbkZuPFRWYWx1ZT5bXVxuKTogRm9ybVN0YXRlPFRWYWx1ZT47XG5cbi8qKlxuICogVGhpcyB1cGRhdGUgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2YgdmFsaWRhdGlvbiBmdW5jdGlvbnMgYW5kIGEgZm9ybVxuICogc3RhdGUgYW5kIHNldHMgdGhlIGVycm9ycyBvZiB0aGUgc3RhdGUgdG8gdGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgZ2l2ZW5cbiAqIHZhbGlkYXRpb24gZnVuY3Rpb24ocykgdG8gdGhlIHN0YXRlJ3MgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZTxUVmFsdWU+KFxuICBzdGF0ZTogQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPixcbiAgcmVzdDogVmFsaWRhdGlvbkZuPFRWYWx1ZT5bXSxcbik6IEZvcm1TdGF0ZTxUVmFsdWU+O1xuXG4vKipcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIG9uZSBvciBtb3JlIHZhbGlkYXRpb24gZnVuY3Rpb25zIGFuZCByZXR1cm5zXG4gKiBhIHByb2plY3Rpb24gZnVuY3Rpb24gdGhhdCBzZXRzIHRoZSBlcnJvcnMgb2YgYSBmb3JtIHN0YXRlIHRvIHRoZSByZXN1bHRcbiAqIG9mIGFwcGx5aW5nIHRoZSBnaXZlbiB2YWxpZGF0aW9uIGZ1bmN0aW9uKHMpIHRvIHRoZSBzdGF0ZSdzIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGU8VFZhbHVlPihcbiAgZm46IFZhbGlkYXRpb25GbjxUVmFsdWU+LFxuICAuLi5yZXN0OiBWYWxpZGF0aW9uRm48VFZhbHVlPltdXG4pOiAoc3RhdGU6IEFic3RyYWN0Q29udHJvbFN0YXRlPFRWYWx1ZT4pID0+IEZvcm1TdGF0ZTxUVmFsdWU+O1xuXG4vKipcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5IG9mIHZhbGlkYXRpb24gZnVuY3Rpb25zIGFuZCByZXR1cm5zIGFcbiAqIHByb2plY3Rpb24gZnVuY3Rpb24gdGhhdCBzZXRzIHRoZSBlcnJvcnMgb2YgYSBmb3JtIHN0YXRlIHRvIHRoZSByZXN1bHQgb2ZcbiAqIGFwcGx5aW5nIHRoZSBnaXZlbiB2YWxpZGF0aW9uIGZ1bmN0aW9uKHMpIHRvIHRoZSBzdGF0ZSdzIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGU8VFZhbHVlPihcbiAgcmVzdDogVmFsaWRhdGlvbkZuPFRWYWx1ZT5bXSxcbik6IChzdGF0ZTogQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPikgPT4gRm9ybVN0YXRlPFRWYWx1ZT47XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZTxUVmFsdWU+KFxuICBzdGF0ZU9yRnVuY3Rpb25PckZ1bmN0aW9uQXJyYXk6IEZvcm1TdGF0ZTxUVmFsdWU+IHwgVmFsaWRhdGlvbkZuPFRWYWx1ZT4gfCBWYWxpZGF0aW9uRm48VFZhbHVlPltdLFxuICBmdW5jdGlvbk9yRnVuY3Rpb25BcnI/OiBWYWxpZGF0aW9uRm48VFZhbHVlPiB8IFZhbGlkYXRpb25GbjxUVmFsdWU+W10sXG4gIC4uLnJlc3Q6IFZhbGlkYXRpb25GbjxUVmFsdWU+W11cbikge1xuICBpZiAoaXNGb3JtU3RhdGU8VFZhbHVlPihzdGF0ZU9yRnVuY3Rpb25PckZ1bmN0aW9uQXJyYXkpKSB7XG4gICAgY29uc3QgZnVuY3Rpb25BcnIgPSBBcnJheS5pc0FycmF5KGZ1bmN0aW9uT3JGdW5jdGlvbkFycikgPyBmdW5jdGlvbk9yRnVuY3Rpb25BcnIgOiBbZnVuY3Rpb25PckZ1bmN0aW9uQXJyIV07XG4gICAgY29uc3QgZXJyb3JzID0gZnVuY3Rpb25BcnIuY29uY2F0KC4uLnJlc3QpXG4gICAgICAucmVkdWNlKChhZ2csIHZhbGlkYXRpb25GbikgPT4gT2JqZWN0LmFzc2lnbihhZ2csIHZhbGlkYXRpb25GbihzdGF0ZU9yRnVuY3Rpb25PckZ1bmN0aW9uQXJyYXkudmFsdWUpKSwge30gYXMgVmFsaWRhdGlvbkVycm9ycyk7XG4gICAgcmV0dXJuIGZvcm1TdGF0ZVJlZHVjZXI8VFZhbHVlPihzdGF0ZU9yRnVuY3Rpb25PckZ1bmN0aW9uQXJyYXksIG5ldyBTZXRFcnJvcnNBY3Rpb24oc3RhdGVPckZ1bmN0aW9uT3JGdW5jdGlvbkFycmF5LmlkLCBlcnJvcnMpKTtcbiAgfVxuXG4gIGxldCB1cGRhdGVGbkFyciA9IEFycmF5LmlzQXJyYXkoc3RhdGVPckZ1bmN0aW9uT3JGdW5jdGlvbkFycmF5KSA/IHN0YXRlT3JGdW5jdGlvbk9yRnVuY3Rpb25BcnJheSA6IFtzdGF0ZU9yRnVuY3Rpb25PckZ1bmN0aW9uQXJyYXldO1xuICB1cGRhdGVGbkFyciA9IGZ1bmN0aW9uT3JGdW5jdGlvbkFyciA9PT0gdW5kZWZpbmVkID8gdXBkYXRlRm5BcnIgOiB1cGRhdGVGbkFyci5jb25jYXQoZnVuY3Rpb25PckZ1bmN0aW9uQXJyKTtcbiAgcmV0dXJuIChzOiBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+KSA9PiB2YWxpZGF0ZTxUVmFsdWU+KGVuc3VyZVN0YXRlKHMpLCB1cGRhdGVGbkFyci5jb25jYXQocmVzdCkpO1xufVxuIl19