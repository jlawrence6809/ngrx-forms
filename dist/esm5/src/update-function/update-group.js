import * as tslib_1 from "tslib";
import { computeGroupState, isGroupState } from '../state';
import { ensureState } from './util';
function updateGroupControlsState(updateFns) {
    return function (state) {
        var hasChanged = false;
        var newControls = Object.keys(state.controls).reduce(function (res, key) {
            var _a, _b;
            var control = state.controls[key];
            Object.assign(res, (_a = {}, _a[key] = control, _a));
            if (updateFns.hasOwnProperty(key)) {
                var newControl = updateFns[key](control, state);
                hasChanged = hasChanged || newControl !== control;
                Object.assign(res, (_b = {}, _b[key] = newControl, _b));
            }
            return res;
        }, {});
        return hasChanged ? newControls : state.controls;
    };
}
function updateGroupSingle(updateFns) {
    return function (state) {
        var newControls = updateGroupControlsState(updateFns)(state);
        return newControls !== state.controls
            ? computeGroupState(state.id, newControls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
                wasOrShouldBeDirty: state.isDirty,
                wasOrShouldBeEnabled: state.isEnabled,
                wasOrShouldBeTouched: state.isTouched,
                wasOrShouldBeSubmitted: state.isSubmitted,
            })
            : state;
    };
}
export function updateGroup(stateOrUpdateFnOrUpdateFnArray, updateFnOrUpdateFnArr) {
    var rest = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
    }
    if (isGroupState(stateOrUpdateFnOrUpdateFnArray)) {
        var updateFnArr_1 = Array.isArray(updateFnOrUpdateFnArr) ? updateFnOrUpdateFnArr : [updateFnOrUpdateFnArr];
        return updateFnArr_1.concat.apply(updateFnArr_1, tslib_1.__spread(rest)).reduce(function (s, updateFn) { return updateGroupSingle(updateFn)(s); }, stateOrUpdateFnOrUpdateFnArray);
    }
    var updateFnArr = Array.isArray(stateOrUpdateFnOrUpdateFnArray) ? stateOrUpdateFnOrUpdateFnArray : [stateOrUpdateFnOrUpdateFnArray];
    updateFnArr = updateFnOrUpdateFnArr === undefined ? updateFnArr : updateFnArr.concat(updateFnOrUpdateFnArr);
    return function (s) { return updateGroup(ensureState(s), updateFnArr.concat(rest)); };
}
//# sourceMappingURL=data:application/json;base64,