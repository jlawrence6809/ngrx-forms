import * as tslib_1 from "tslib";
import { computeArrayState, isArrayState } from '../state';
import { ensureState } from './util';
function updateArrayControlsState(filterFn, updateFn) {
    return function (state) {
        var hasChanged = false;
        var newControls = state.controls.map(function (control, idx) {
            if (!filterFn(control, idx)) {
                return control;
            }
            var newControl = updateFn(control, state);
            hasChanged = hasChanged || newControl !== control;
            return newControl;
        });
        return hasChanged ? newControls : state.controls;
    };
}
function updateArraySingle(filterFn, updateFn) {
    return function (state) {
        var newControls = updateArrayControlsState(filterFn, updateFn)(state);
        return newControls !== state.controls
            ? computeArrayState(state.id, newControls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
                wasOrShouldBeDirty: state.isDirty,
                wasOrShouldBeEnabled: state.isEnabled,
                wasOrShouldBeTouched: state.isTouched,
                wasOrShouldBeSubmitted: state.isSubmitted,
            })
            : state;
    };
}
export function updateArrayWithFilter(stateOrFilterFunction, filterFunctionOrFunctionOrFunctionArray, updateFnOrUpdateFnArr) {
    var rest = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        rest[_i - 3] = arguments[_i];
    }
    if (isArrayState(stateOrFilterFunction)) {
        var filterFn_1 = filterFunctionOrFunctionOrFunctionArray;
        var updateFnArr_1 = Array.isArray(updateFnOrUpdateFnArr) ? updateFnOrUpdateFnArr : [updateFnOrUpdateFnArr];
        return updateFnArr_1.concat.apply(updateFnArr_1, tslib_1.__spread(rest)).reduce(function (s, updateFn) { return updateArraySingle(filterFn_1, updateFn)(s); }, stateOrFilterFunction);
    }
    var updateFnArr = Array.isArray(filterFunctionOrFunctionOrFunctionArray)
        ? filterFunctionOrFunctionOrFunctionArray
        : [filterFunctionOrFunctionOrFunctionArray];
    updateFnArr = updateFnOrUpdateFnArr === undefined ? updateFnArr : updateFnArr.concat(updateFnOrUpdateFnArr);
    return function (s) { return updateArrayWithFilter(ensureState(s), stateOrFilterFunction, updateFnArr.concat(rest)); };
}
export function updateArray(stateOrFunctionOrFunctionArray, updateFnOrUpdateFnArr) {
    var rest = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
    }
    if (isArrayState(stateOrFunctionOrFunctionArray)) {
        var updateFnArr_2 = Array.isArray(updateFnOrUpdateFnArr) ? updateFnOrUpdateFnArr : [updateFnOrUpdateFnArr];
        return updateFnArr_2.concat.apply(updateFnArr_2, tslib_1.__spread(rest)).reduce(function (s, updateFn) { return updateArraySingle(function () { return true; }, updateFn)(s); }, stateOrFunctionOrFunctionArray);
    }
    var updateFnArr = Array.isArray(stateOrFunctionOrFunctionArray) ? stateOrFunctionOrFunctionArray : [stateOrFunctionOrFunctionArray];
    updateFnArr = updateFnOrUpdateFnArr === undefined ? updateFnArr : updateFnArr.concat(updateFnOrUpdateFnArr);
    return function (s) { return updateArray(ensureState(s), updateFnArr.concat(rest)); };
}
//# sourceMappingURL=data:application/json;base64,