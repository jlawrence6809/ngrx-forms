import { SetErrorsAction } from '../../actions';
import { computeArrayState } from '../../state';
import { deepEquals } from '../../util';
import { childReducer } from './util';
export function setErrorsReducer(state, action) {
    if (action.type !== SetErrorsAction.TYPE) {
        return state;
    }
    if (action.controlId !== state.id) {
        return childReducer(state, action);
    }
    if (state.isDisabled) {
        return state;
    }
    if (state.errors === action.errors) {
        return state;
    }
    if (deepEquals(state.errors, action.errors)) {
        return state;
    }
    if (!action.errors || typeof action.errors !== 'object' || Array.isArray(action.errors)) {
        throw new Error("Control errors must be an object; got " + action.errors);
    }
    if (Object.keys(action.errors).some(function (key) { return key.startsWith('_'); })) {
        throw new Error("Control errors must not use underscore as a prefix; got " + JSON.stringify(action.errors));
    }
    if (Object.keys(action.errors).some(function (key) { return key.startsWith('$'); })) {
        throw new Error("Control errors must not use $ as a prefix; got " + JSON.stringify(action.errors));
    }
    var childAndAsyncErrors = Object.keys(state.errors)
        .filter(function (key) { return key.startsWith('_') || key.startsWith('$'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = state.errors[key], _a));
    }, {});
    var newErrors = Object.assign(childAndAsyncErrors, action.errors);
    return computeArrayState(state.id, state.controls, state.value, newErrors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: state.isDirty,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvYXJyYXkvcmVkdWNlci9zZXQtZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVyxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFvQyxNQUFNLGFBQWEsQ0FBQztBQUNsRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdEMsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixLQUE2QixFQUM3QixNQUF5QjtJQUV6QixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDakMsT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1FBQ3BCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNsQyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDM0MsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQVEsTUFBTSxDQUFDLE1BQWMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDaEcsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBeUMsTUFBTSxDQUFDLE1BQVEsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFuQixDQUFtQixDQUFDLEVBQUU7UUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBMkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFHLENBQUMsQ0FBQztLQUM3RztJQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxFQUFFO1FBQy9ELE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQWtELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRyxDQUFDLENBQUM7S0FDcEc7SUFFRCxJQUFNLG1CQUFtQixHQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7U0FDdEIsTUFBTSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUExQyxDQUEwQyxDQUFDO1NBQ3pELE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxHQUFHOztRQUFLLE9BQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFlBQUksR0FBQyxHQUFHLElBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBRztJQUFoRCxDQUFnRCxFQUFFLEVBQXNCLENBQUMsQ0FBQztJQUVwRyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwRSxPQUFPLGlCQUFpQixDQUN0QixLQUFLLENBQUMsRUFBRSxFQUNSLEtBQUssQ0FBQyxRQUFRLEVBQ2QsS0FBSyxDQUFDLEtBQUssRUFDWCxTQUFTLEVBQ1QsS0FBSyxDQUFDLGtCQUFrQixFQUN4QixLQUFLLENBQUMscUJBQXFCLEVBQzNCO1FBQ0Usa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDakMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDckMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDckMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLFdBQVc7S0FDMUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbnMsIFNldEVycm9yc0FjdGlvbiB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xuaW1wb3J0IHsgY29tcHV0ZUFycmF5U3RhdGUsIEZvcm1BcnJheVN0YXRlLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnLi4vLi4vc3RhdGUnO1xuaW1wb3J0IHsgZGVlcEVxdWFscyB9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHsgY2hpbGRSZWR1Y2VyIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yc1JlZHVjZXI8VFZhbHVlPihcbiAgc3RhdGU6IEZvcm1BcnJheVN0YXRlPFRWYWx1ZT4sXG4gIGFjdGlvbjogQWN0aW9uczxUVmFsdWVbXT4sXG4pOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+IHtcbiAgaWYgKGFjdGlvbi50eXBlICE9PSBTZXRFcnJvcnNBY3Rpb24uVFlQRSkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGlmIChhY3Rpb24uY29udHJvbElkICE9PSBzdGF0ZS5pZCkge1xuICAgIHJldHVybiBjaGlsZFJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUuaXNEaXNhYmxlZCkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5lcnJvcnMgPT09IGFjdGlvbi5lcnJvcnMpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBpZiAoZGVlcEVxdWFscyhzdGF0ZS5lcnJvcnMsIGFjdGlvbi5lcnJvcnMpKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgaWYgKCFhY3Rpb24uZXJyb3JzIHx8IHR5cGVvZiAoYWN0aW9uLmVycm9ycyBhcyBhbnkpICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGFjdGlvbi5lcnJvcnMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb250cm9sIGVycm9ycyBtdXN0IGJlIGFuIG9iamVjdDsgZ290ICR7YWN0aW9uLmVycm9yc31gKTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhhY3Rpb24uZXJyb3JzKS5zb21lKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnXycpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ29udHJvbCBlcnJvcnMgbXVzdCBub3QgdXNlIHVuZGVyc2NvcmUgYXMgYSBwcmVmaXg7IGdvdCAke0pTT04uc3RyaW5naWZ5KGFjdGlvbi5lcnJvcnMpfWApO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGFjdGlvbi5lcnJvcnMpLnNvbWUoa2V5ID0+IGtleS5zdGFydHNXaXRoKCckJykpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb250cm9sIGVycm9ycyBtdXN0IG5vdCB1c2UgJCBhcyBhIHByZWZpeDsgZ290ICR7SlNPTi5zdHJpbmdpZnkoYWN0aW9uLmVycm9ycyl9YCk7XG4gIH1cblxuICBjb25zdCBjaGlsZEFuZEFzeW5jRXJyb3JzID1cbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpXG4gICAgICAuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnXycpIHx8IGtleS5zdGFydHNXaXRoKCckJykpXG4gICAgICAucmVkdWNlKChyZXMsIGtleSkgPT4gT2JqZWN0LmFzc2lnbihyZXMsIHsgW2tleV06IHN0YXRlLmVycm9yc1trZXldIH0pLCB7fSBhcyBWYWxpZGF0aW9uRXJyb3JzKTtcblxuICBjb25zdCBuZXdFcnJvcnMgPSBPYmplY3QuYXNzaWduKGNoaWxkQW5kQXN5bmNFcnJvcnMsIGFjdGlvbi5lcnJvcnMpO1xuXG4gIHJldHVybiBjb21wdXRlQXJyYXlTdGF0ZShcbiAgICBzdGF0ZS5pZCxcbiAgICBzdGF0ZS5jb250cm9scyxcbiAgICBzdGF0ZS52YWx1ZSxcbiAgICBuZXdFcnJvcnMsXG4gICAgc3RhdGUucGVuZGluZ1ZhbGlkYXRpb25zLFxuICAgIHN0YXRlLnVzZXJEZWZpbmVkUHJvcGVydGllcyxcbiAgICB7XG4gICAgICB3YXNPclNob3VsZEJlRGlydHk6IHN0YXRlLmlzRGlydHksXG4gICAgICB3YXNPclNob3VsZEJlRW5hYmxlZDogc3RhdGUuaXNFbmFibGVkLFxuICAgICAgd2FzT3JTaG91bGRCZVRvdWNoZWQ6IHN0YXRlLmlzVG91Y2hlZCxcbiAgICAgIHdhc09yU2hvdWxkQmVTdWJtaXR0ZWQ6IHN0YXRlLmlzU3VibWl0dGVkLFxuICAgIH0sXG4gICk7XG59XG4iXX0=