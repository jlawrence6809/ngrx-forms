import * as tslib_1 from "tslib";
import { formStateReducer } from '../../reducer';
import { computeArrayState, isArrayState, isGroupState } from '../../state';
export function dispatchActionPerChild(controls, actionCreator) {
    var hasChanged = false;
    var newControls = controls
        .map(function (state) {
        var newState = formStateReducer(state, actionCreator(state.id));
        hasChanged = hasChanged || state !== newState;
        return newState;
    });
    return hasChanged ? newControls : controls;
}
function callChildReducers(controls, action) {
    var hasChanged = false;
    var newControls = controls
        .map(function (state) {
        var newState = formStateReducer(state, action);
        hasChanged = hasChanged || state !== newState;
        return newState;
    });
    return hasChanged ? newControls : controls;
}
export function childReducer(state, action) {
    var controls = callChildReducers(state.controls, action);
    if (state.controls === controls) {
        return state;
    }
    return computeArrayState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: state.isDirty,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
export function updateIdRecursiveForGroup(state, newId) {
    var controls = Object.keys(state.controls)
        .reduce(function (agg, key) {
        var _a;
        return Object.assign(agg, (_a = {},
            _a[key] = updateIdRecursive(state.controls[key], newId + "." + key),
            _a));
    }, {});
    return tslib_1.__assign({}, state, { id: newId, controls: controls });
}
export function updateIdRecursiveForArray(state, newId) {
    var controls = state.controls.map(function (c, i) { return updateIdRecursive(c, newId + "." + i); });
    return tslib_1.__assign({}, state, { id: newId, controls: controls });
}
export function updateIdRecursive(state, newId) {
    if (state.id === newId) {
        return state;
    }
    if (isGroupState(state)) {
        return updateIdRecursiveForGroup(state, newId);
    }
    if (isArrayState(state)) {
        return updateIdRecursiveForArray(state, newId);
    }
    return tslib_1.__assign({}, state, { id: newId });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvYXJyYXkvcmVkdWNlci91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFnRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTFJLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsUUFBc0MsRUFDdEMsYUFBcUQ7SUFFckQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLElBQU0sV0FBVyxHQUFHLFFBQVE7U0FDekIsR0FBRyxDQUFDLFVBQUEsS0FBSztRQUNSLElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFTLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUUsVUFBVSxHQUFHLFVBQVUsSUFBSSxLQUFLLEtBQUssUUFBUSxDQUFDO1FBQzlDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUwsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQzdDLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixRQUFzQyxFQUN0QyxNQUF5QjtJQUV6QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDdkIsSUFBTSxXQUFXLEdBQUcsUUFBUTtTQUN6QixHQUFHLENBQUMsVUFBQSxLQUFLO1FBQ1IsSUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQVMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELFVBQVUsR0FBRyxVQUFVLElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQztRQUM5QyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVMLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBUyxLQUE2QixFQUFFLE1BQXlCO0lBQzNGLElBQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFM0QsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUMvQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsT0FBTyxpQkFBaUIsQ0FDdEIsS0FBSyxDQUFDLEVBQUUsRUFDUixRQUFRLEVBQ1IsS0FBSyxDQUFDLEtBQUssRUFDWCxLQUFLLENBQUMsTUFBTSxFQUNaLEtBQUssQ0FBQyxrQkFBa0IsRUFDeEIsS0FBSyxDQUFDLHFCQUFxQixFQUMzQjtRQUNFLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ2pDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxTQUFTO1FBQ3JDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxTQUFTO1FBQ3JDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxXQUFXO0tBQzFDLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQVMsS0FBNkIsRUFBRSxLQUFhO0lBQzVGLElBQU0sUUFBUSxHQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztTQUN4QixNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRzs7UUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRztZQUNyQyxHQUFDLEdBQUcsSUFBRyxpQkFBaUIsQ0FBdUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFtQixDQUFDLEVBQUssS0FBSyxTQUFJLEdBQUssQ0FBQztnQkFDdEc7SUFGb0IsQ0FFcEIsRUFBRSxFQUErQixDQUFDLENBQUM7SUFFekMsNEJBQ0ssS0FBSyxJQUNSLEVBQUUsRUFBRSxLQUFLLEVBQ1QsUUFBUSxVQUFBLElBQ1I7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLHlCQUF5QixDQUFTLEtBQTZCLEVBQUUsS0FBYTtJQUM1RixJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxpQkFBaUIsQ0FBQyxDQUFDLEVBQUssS0FBSyxTQUFJLENBQUcsQ0FBQyxFQUFyQyxDQUFxQyxDQUFDLENBQUM7SUFFckYsNEJBQ0ssS0FBSyxJQUNSLEVBQUUsRUFBRSxLQUFLLEVBQ1QsUUFBUSxVQUFBLElBQ1I7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFTLEtBQXdCLEVBQUUsS0FBYTtJQUMvRSxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLFlBQVksQ0FBUyxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLHlCQUF5QixDQUFTLEtBQUssRUFBRSxLQUFLLENBQXNCLENBQUM7S0FDN0U7SUFFRCxJQUFJLFlBQVksQ0FBUyxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLHlCQUF5QixDQUFTLEtBQUssRUFBRSxLQUFLLENBQVEsQ0FBQztLQUMvRDtJQUVELDRCQUNNLEtBQWEsSUFDakIsRUFBRSxFQUFFLEtBQUssSUFDVDtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XG5pbXBvcnQgeyBmb3JtU3RhdGVSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vcmVkdWNlcic7XG5pbXBvcnQgeyBjb21wdXRlQXJyYXlTdGF0ZSwgRm9ybUFycmF5U3RhdGUsIEZvcm1Hcm91cENvbnRyb2xzLCBGb3JtR3JvdXBTdGF0ZSwgRm9ybVN0YXRlLCBpc0FycmF5U3RhdGUsIGlzR3JvdXBTdGF0ZSB9IGZyb20gJy4uLy4uL3N0YXRlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoQWN0aW9uUGVyQ2hpbGQ8VFZhbHVlPihcbiAgY29udHJvbHM6IHJlYWRvbmx5IEZvcm1TdGF0ZTxUVmFsdWU+W10sXG4gIGFjdGlvbkNyZWF0b3I6IChjb250cm9sSWQ6IHN0cmluZykgPT4gQWN0aW9uczxUVmFsdWU+LFxuKTogcmVhZG9ubHkgRm9ybVN0YXRlPFRWYWx1ZT5bXSB7XG4gIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gIGNvbnN0IG5ld0NvbnRyb2xzID0gY29udHJvbHNcbiAgICAubWFwKHN0YXRlID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gZm9ybVN0YXRlUmVkdWNlcjxUVmFsdWU+KHN0YXRlLCBhY3Rpb25DcmVhdG9yKHN0YXRlLmlkKSk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBzdGF0ZSAhPT0gbmV3U3RhdGU7XG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgfSk7XG5cbiAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXdDb250cm9scyA6IGNvbnRyb2xzO1xufVxuXG5mdW5jdGlvbiBjYWxsQ2hpbGRSZWR1Y2VyczxUVmFsdWU+KFxuICBjb250cm9sczogcmVhZG9ubHkgRm9ybVN0YXRlPFRWYWx1ZT5bXSxcbiAgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZVtdPixcbik6IHJlYWRvbmx5IEZvcm1TdGF0ZTxUVmFsdWU+W10ge1xuICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICBjb25zdCBuZXdDb250cm9scyA9IGNvbnRyb2xzXG4gICAgLm1hcChzdGF0ZSA9PiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IGZvcm1TdGF0ZVJlZHVjZXI8VFZhbHVlPihzdGF0ZSwgYWN0aW9uKTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IHN0YXRlICE9PSBuZXdTdGF0ZTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcblxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0NvbnRyb2xzIDogY29udHJvbHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZFJlZHVjZXI8VFZhbHVlPihzdGF0ZTogRm9ybUFycmF5U3RhdGU8VFZhbHVlPiwgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZVtdPikge1xuICBjb25zdCBjb250cm9scyA9IGNhbGxDaGlsZFJlZHVjZXJzKHN0YXRlLmNvbnRyb2xzLCBhY3Rpb24pO1xuXG4gIGlmIChzdGF0ZS5jb250cm9scyA9PT0gY29udHJvbHMpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICByZXR1cm4gY29tcHV0ZUFycmF5U3RhdGUoXG4gICAgc3RhdGUuaWQsXG4gICAgY29udHJvbHMsXG4gICAgc3RhdGUudmFsdWUsXG4gICAgc3RhdGUuZXJyb3JzLFxuICAgIHN0YXRlLnBlbmRpbmdWYWxpZGF0aW9ucyxcbiAgICBzdGF0ZS51c2VyRGVmaW5lZFByb3BlcnRpZXMsXG4gICAge1xuICAgICAgd2FzT3JTaG91bGRCZURpcnR5OiBzdGF0ZS5pc0RpcnR5LFxuICAgICAgd2FzT3JTaG91bGRCZUVuYWJsZWQ6IHN0YXRlLmlzRW5hYmxlZCxcbiAgICAgIHdhc09yU2hvdWxkQmVUb3VjaGVkOiBzdGF0ZS5pc1RvdWNoZWQsXG4gICAgICB3YXNPclNob3VsZEJlU3VibWl0dGVkOiBzdGF0ZS5pc1N1Ym1pdHRlZCxcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSWRSZWN1cnNpdmVGb3JHcm91cDxUVmFsdWU+KHN0YXRlOiBGb3JtR3JvdXBTdGF0ZTxUVmFsdWU+LCBuZXdJZDogc3RyaW5nKTogRm9ybUdyb3VwU3RhdGU8VFZhbHVlPiB7XG4gIGNvbnN0IGNvbnRyb2xzOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+ID1cbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5jb250cm9scylcbiAgICAgIC5yZWR1Y2UoKGFnZywga2V5KSA9PiBPYmplY3QuYXNzaWduKGFnZywge1xuICAgICAgICBba2V5XTogdXBkYXRlSWRSZWN1cnNpdmU8VFZhbHVlW2tleW9mIFRWYWx1ZV0+KHN0YXRlLmNvbnRyb2xzW2tleSBhcyBrZXlvZiBUVmFsdWVdLCBgJHtuZXdJZH0uJHtrZXl9YCksXG4gICAgICB9KSwge30gYXMgRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPik7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICBpZDogbmV3SWQsXG4gICAgY29udHJvbHMsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVJZFJlY3Vyc2l2ZUZvckFycmF5PFRWYWx1ZT4oc3RhdGU6IEZvcm1BcnJheVN0YXRlPFRWYWx1ZT4sIG5ld0lkOiBzdHJpbmcpOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+IHtcbiAgY29uc3QgY29udHJvbHMgPSBzdGF0ZS5jb250cm9scy5tYXAoKGMsIGkpID0+IHVwZGF0ZUlkUmVjdXJzaXZlKGMsIGAke25ld0lkfS4ke2l9YCkpO1xuXG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGUsXG4gICAgaWQ6IG5ld0lkLFxuICAgIGNvbnRyb2xzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSWRSZWN1cnNpdmU8VFZhbHVlPihzdGF0ZTogRm9ybVN0YXRlPFRWYWx1ZT4sIG5ld0lkOiBzdHJpbmcpOiBGb3JtU3RhdGU8VFZhbHVlPiB7XG4gIGlmIChzdGF0ZS5pZCA9PT0gbmV3SWQpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBpZiAoaXNHcm91cFN0YXRlPFRWYWx1ZT4oc3RhdGUpKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUlkUmVjdXJzaXZlRm9yR3JvdXA8VFZhbHVlPihzdGF0ZSwgbmV3SWQpIGFzIEZvcm1TdGF0ZTxUVmFsdWU+O1xuICB9XG5cbiAgaWYgKGlzQXJyYXlTdGF0ZTxUVmFsdWU+KHN0YXRlKSkge1xuICAgIHJldHVybiB1cGRhdGVJZFJlY3Vyc2l2ZUZvckFycmF5PFRWYWx1ZT4oc3RhdGUsIG5ld0lkKSBhcyBhbnk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLihzdGF0ZSBhcyBhbnkpLFxuICAgIGlkOiBuZXdJZCxcbiAgfTtcbn1cbiJdfQ==